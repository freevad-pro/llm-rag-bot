"""
End-to-End —Ç–µ—Å—Ç—ã –¥–ª—è –ø–æ–ª–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ Telegram –±–æ—Ç–∞
"""
import pytest
from unittest.mock import AsyncMock, patch
from datetime import datetime

from src.application.telegram.services.user_service import ensure_user_exists
from src.application.telegram.services.message_service import get_or_create_conversation
from src.application.telegram.services.lead_service import LeadService
from src.infrastructure.database.models import User, Conversation, Message, Lead
from tests.fixtures.factories import TestDataBuilder


@pytest.mark.e2e
@pytest.mark.telegram
@pytest.mark.slow
class TestTelegramScenarios:
    """–¢–µ—Å—Ç—ã –ø–æ–ª–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –≤ Telegram"""
    
    async def test_new_user_registration_flow(self, test_session):
        """–¢–µ—Å—Ç: –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
        chat_id = 123456
        telegram_user_id = 987654
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–ø–µ—Ä–≤—ã–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ (/start)
        user = await ensure_user_exists(
            test_session,
            chat_id=chat_id,
            telegram_user_id=telegram_user_id,
            username="new_user",
            first_name="–ù–æ–≤—ã–π",
            last_name="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        )
        
        assert user is not None
        assert user.chat_id == chat_id
        assert user.telegram_user_id == telegram_user_id
        assert user.username == "new_user"
        assert user.first_name == "–ù–æ–≤—ã–π"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ –ë–î
        await test_session.commit()
        
        # –°–æ–∑–¥–∞–µ—Ç—Å—è –¥–∏–∞–ª–æ–≥
        conversation = await get_or_create_conversation(
            test_session,
            chat_id=chat_id
        )
        
        assert conversation is not None
        assert conversation.chat_id == chat_id
        assert conversation.status == "active"
        assert conversation.platform == "telegram"
    
    async def test_search_product_scenario(self, test_session):
        """–¢–µ—Å—Ç: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—â–µ—Ç —Ç–æ–≤–∞—Ä —á–µ—Ä–µ–∑ –±–æ—Ç–∞"""
        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –¥–∏–∞–ª–æ–≥
        user, conversation = TestDataBuilder.create_user_with_conversation(chat_id=555555)
        test_session.add_all([user, conversation])
        await test_session.flush()
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        search_message = Message(
            conversation_id=conversation.id,
            role="user",
            content="–ò—â—É –Ω–∞—Å–æ—Å —Ü–∏—Ä–∫—É–ª—è—Ü–∏–æ–Ω–Ω—ã–π –¥–ª—è –æ—Ç–æ–ø–ª–µ–Ω–∏—è",
            # tokens_used=12
        )
        test_session.add(search_message)
        
        # –ë–æ—Ç –æ—Ç–≤–µ—á–∞–µ—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞
        response_message = Message(
            conversation_id=conversation.id,
            role="assistant",
            content="üîç –ù–∞–π–¥–µ–Ω–æ 5 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '–Ω–∞—Å–æ—Å —Ü–∏—Ä–∫—É–ª—è—Ü–∏–æ–Ω–Ω—ã–π':\n\n1. –ù–∞—Å–æ—Å —Ü–∏—Ä–∫—É–ª—è—Ü–∏–æ–Ω–Ω—ã–π GRUNDFOS...",
            # tokens_used=85
        )
        test_session.add(response_message)
        
        await test_session.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞
        from sqlalchemy import select
        result = await test_session.execute(
            select(Message).where(Message.conversation_id == conversation.id)
        )
        messages = result.scalars().all()
        
        assert len(messages) == 2
        assert messages[0].role == "user"
        assert messages[1].role == "assistant"
        assert "–Ω–∞–π–¥–µ–Ω–æ" in messages[1].content.lower()
    
    async def test_lead_creation_through_contact_form(self, test_session):
        """–¢–µ—Å—Ç: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø–æ–ª–Ω—è–µ—Ç —Ñ–æ—Ä–º—É –∫–æ–Ω—Ç–∞–∫—Ç–∞ —á–µ—Ä–µ–∑ –±–æ—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user, conversation = TestDataBuilder.create_user_with_conversation(chat_id=777777)
        test_session.add_all([user, conversation])
        await test_session.flush()
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º—ã —á–µ—Ä–µ–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
        # (–í —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ handlers)
        
        # 1. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –∏–º—è
        name_message = Message(
            conversation_id=conversation.id,
            role="user",
            content="–ò–≤–∞–Ω –°–∏–¥–æ—Ä–æ–≤",
            # tokens_used=5
        )
        test_session.add(name_message)
        
        # 2. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Ç–µ–ª–µ—Ñ–æ–Ω
        phone_message = Message(
            conversation_id=conversation.id,
            role="user", 
            content="+79001234567",
            # tokens_used=3
        )
        test_session.add(phone_message)
        
        # 3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç email
        email_message = Message(
            conversation_id=conversation.id,
            role="user",
            content="ivan@example.com",
            # tokens_used=4
        )
        test_session.add(email_message)
        
        # 4. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–ø–∏—Å—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å
        question_message = Message(
            conversation_id=conversation.id,
            role="user",
            content="–ù—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –≤—ã–±–æ—Ä—É –Ω–∞—Å–æ—Å–∞ –¥–ª—è —á–∞—Å—Ç–Ω–æ–≥–æ –¥–æ–º–∞",
            # tokens_used=15
        )
        test_session.add(question_message)
        
        await test_session.flush()
        
        # 5. –°–æ–∑–¥–∞–µ—Ç—Å—è –ª–∏–¥ —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
        lead_service = LeadService()
        from src.application.telegram.services.lead_service import LeadCreateRequest
        from src.domain.entities.lead import LeadSource
        
        lead_data = LeadCreateRequest(
            name="–ò–≤–∞–Ω –°–∏–¥–æ—Ä–æ–≤",
            phone="+79001234567",
            email="ivan@example.com",
            question="–ù—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ –≤—ã–±–æ—Ä—É –Ω–∞—Å–æ—Å–∞ –¥–ª—è —á–∞—Å—Ç–Ω–æ–≥–æ –¥–æ–º–∞",
            lead_source=LeadSource.TELEGRAM_BOT
        )
        
        created_lead = await lead_service.create_lead(
            test_session,
            user.id,
            lead_data
        )
        
        # 6. –ë–æ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–æ–∑–¥–∞–Ω–∏–µ –ª–∏–¥–∞
        confirmation_message = Message(
            conversation_id=conversation.id,
            role="assistant",
            content="‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞! –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: #001\n–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —Ä–∞–±–æ—á–µ–≥–æ –¥–Ω—è.",
            # tokens_used=25
        )
        test_session.add(confirmation_message)
        
        await test_session.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        assert created_lead is not None
        assert created_lead.name == "–ò–≤–∞–Ω –°–∏–¥–æ—Ä–æ–≤"
        assert created_lead.phone == "+79001234567"
        assert created_lead.email == "ivan@example.com"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤–µ—Å—å –¥–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω
        from sqlalchemy import select
        result = await test_session.execute(
            select(Message).where(Message.conversation_id == conversation.id)
        )
        messages = result.scalars().all()
        
        assert len(messages) == 5  # 4 –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è + 1 –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    
    async def test_inactive_user_auto_lead_creation(self, test_session):
        """–¢–µ—Å—Ç: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ª–∏–¥–∞ –¥–ª—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        # –°–æ–∑–¥–∞–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user, conversation, auto_lead = TestDataBuilder.create_inactive_user_with_lead()
        test_session.add_all([user, conversation])
        await test_session.flush()
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É –º–æ–Ω–∏—Ç–æ—Ä–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        lead_service = LeadService()
        
        # –ù–∞—Ö–æ–¥–∏–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        inactive_users = await lead_service.find_inactive_users(
            test_session,
            inactive_minutes=30
        )
        
        assert len(inactive_users) >= 1
        
        # –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ–ª–∏–¥ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id, last_activity = inactive_users[0]
        created_lead = await lead_service.auto_create_lead_for_user(
            test_session,
            user_id
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—Å–æ–∑–¥–∞–Ω–∏–µ –ª–∏–¥–∞
        if created_lead:  # –ú–æ–∂–µ—Ç –±—ã—Ç—å None –µ—Å–ª–∏ –Ω–µ—Ç –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            assert created_lead.auto_created is True
            assert created_lead.question == "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–∏–∞–ª–æ–≥–∞"
            assert created_lead.user_id == user_id
    
    @pytest.mark.slow
    async def test_complete_user_journey(self, test_session):
        """–¢–µ—Å—Ç: –ü–æ–ª–Ω—ã–π –ø—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞"""
        chat_id = 999999
        
        # 1. –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞
        user = await ensure_user_exists(
            test_session,
            chat_id=chat_id,
            telegram_user_id=888888,
            username="complete_user",
            first_name="–ü–æ–ª–Ω—ã–π",
            last_name="–¢–µ—Å—Ç"
        )
        
        # 2. –°–æ–∑–¥–∞–µ—Ç—Å—è –¥–∏–∞–ª–æ–≥
        conversation = await get_or_create_conversation(test_session, chat_id=chat_id)
        await test_session.flush()
        
        # 3. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        welcome_message = Message(
            conversation_id=conversation.id,
            role="assistant",
            content="üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã –∏ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.",
            # tokens_used=20
        )
        test_session.add(welcome_message)
        
        # 4. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –æ —Ç–æ–≤–∞—Ä–∞—Ö
        question_message = Message(
            conversation_id=conversation.id,
            role="user",
            content="–ö–∞–∫–∏–µ —É –≤–∞—Å –µ—Å—Ç—å –Ω–∞—Å–æ—Å—ã –¥–ª—è –¥–∞—á–∏?",
            # tokens_used=10
        )
        test_session.add(question_message)
        
        # 5. –ë–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –ø–æ–∏—Å–∫
        search_offer_message = Message(
            conversation_id=conversation.id,
            role="assistant",
            content="–°–µ–π—á–∞—Å –Ω–∞–π–¥—É –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –Ω–∞—Å–æ—Å—ã –¥–ª—è –¥–∞—á–∏. –í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –ø–æ–∏—Å–∫–æ–º:",
            # tokens_used=15
        )
        test_session.add(search_offer_message)
        
        # 6. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –ø–æ–∏—Å–∫
        search_message = Message(
            conversation_id=conversation.id,
            role="user",
            content="/search –Ω–∞—Å–æ—Å –¥–∞—á–Ω—ã–π",
            # tokens_used=5
        )
        test_session.add(search_message)
        
        # 7. –ë–æ—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        results_message = Message(
            conversation_id=conversation.id,
            role="assistant",
            content="üîç –ù–∞–π–¥–µ–Ω–æ 8 –Ω–∞—Å–æ—Å–æ–≤ –¥–ª—è –¥–∞—á–∏:\n\n1. –ù–∞—Å–æ—Å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–Ω—ã–π –î–ñ–ò–õ–ï–ö–°...\n2. –ù–∞—Å–æ—Å –ø–æ–≥—Ä—É–∂–Ω–æ–π –í–û–î–û–õ–ï–ô...",
            # tokens_used=50
        )
        test_session.add(results_message)
        
        # 8. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç—Å—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º —Ç–æ–≤–∞—Ä–æ–º
        interest_message = Message(
            conversation_id=conversation.id,
            role="user",
            content="–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ –ø—Ä–æ –î–ñ–ò–õ–ï–ö–°",
            # tokens_used=8
        )
        test_session.add(interest_message)
        
        # 9. –ë–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
        consultation_offer = Message(
            conversation_id=conversation.id,
            role="assistant",
            content="–î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ –î–ñ–ò–õ–ï–ö–° —Ä–µ–∫–æ–º–µ–Ω–¥—É—é —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º. –û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç—ã?",
            # tokens_used=25
        )
        test_session.add(consultation_offer)
        
        # 10. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–≥–ª–∞—à–∞–µ—Ç—Å—è –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç
        contact_agree = Message(
            conversation_id=conversation.id,
            role="user",
            content="–î–∞, –æ—Å—Ç–∞–≤–ª—é –∫–æ–Ω—Ç–∞–∫—Ç—ã",
            # tokens_used=5
        )
        test_session.add(contact_agree)
        
        await test_session.flush()
        
        # 11. –°–æ–∑–¥–∞–µ—Ç—Å—è –ª–∏–¥
        lead_service = LeadService()
        from src.application.telegram.services.lead_service import LeadCreateRequest
        from src.domain.entities.lead import LeadSource
        
        lead_data = LeadCreateRequest(
            name="–ü–æ–ª–Ω—ã–π –¢–µ—Å—Ç",
            phone="+79001111111",
            telegram="@complete_user",
            question="–ò–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –Ω–∞—Å–æ—Å –î–ñ–ò–õ–ï–ö–° –¥–ª—è –¥–∞—á–∏",
            lead_source=LeadSource.TELEGRAM_BOT
        )
        
        final_lead = await lead_service.create_lead(
            test_session,
            user.id,
            lead_data
        )
        
        await test_session.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ—Å—å –ø—É—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        assert user is not None
        assert conversation is not None
        assert final_lead is not None
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–∏–∞–ª–æ–≥–µ
        from sqlalchemy import select
        result = await test_session.execute(
            select(Message).where(Message.conversation_id == conversation.id)
        )
        all_messages = result.scalars().all()
        
        assert len(all_messages) == 8  # –ü–æ–ª–Ω—ã–π –¥–∏–∞–ª–æ–≥
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ª–∏–¥
        assert final_lead.name == "–ü–æ–ª–Ω—ã–π –¢–µ—Å—Ç"
        assert final_lead.user_id == user.id
        assert "–î–ñ–ò–õ–ï–ö–°" in final_lead.question
    
    async def test_error_recovery_scenario(self, test_session):
        """–¢–µ—Å—Ç: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ –æ—à–∏–±–æ–∫ –≤ –¥–∏–∞–ª–æ–≥–µ"""
        user, conversation = TestDataBuilder.create_user_with_conversation(chat_id=111111)
        test_session.add_all([user, conversation])
        await test_session.flush()
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        invalid_message = Message(
            conversation_id=conversation.id,
            role="user",
            content="!@#$%^&*()",
            # tokens_used=3
        )
        test_session.add(invalid_message)
        
        # –ë–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—à–∏–±–∫—É –∏ –æ—Ç–≤–µ—á–∞–µ—Ç
        error_response = Message(
            conversation_id=conversation.id,
            role="assistant",
            content="–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–ø–∏—Å–∞—Ç—å —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç –¥—Ä—É–≥–∏–º–∏ —Å–ª–æ–≤–∞–º–∏.",
            # tokens_used=20
        )
        test_session.add(error_response)
        
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–≤—Ç–æ—Ä—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
        correct_message = Message(
            conversation_id=conversation.id,
            role="user",
            content="–ò—â—É –Ω–∞—Å–æ—Å –¥–ª—è –ø–æ–ª–∏–≤–∞ –æ–≥–æ—Ä–æ–¥–∞",
            # tokens_used=8
        )
        test_session.add(correct_message)
        
        # –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å
        success_response = Message(
            conversation_id=conversation.id,
            role="assistant",
            content="–û—Ç–ª–∏—á–Ω–æ! –ü–æ–∫–∞–∑—ã–≤–∞—é –Ω–∞—Å–æ—Å—ã –¥–ª—è –ø–æ–ª–∏–≤–∞:",
            # tokens_used=10
        )
        test_session.add(success_response)
        
        await test_session.commit()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∏–∞–ª–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∏–ª—Å—è –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏
        from sqlalchemy import select
        result = await test_session.execute(
            select(Message).where(Message.conversation_id == conversation.id)
        )
        messages = result.scalars().all()
        
        assert len(messages) == 4
        assert messages[0].content == "!@#$%^&*()"
        assert "–Ω–µ –ø–æ–Ω—è–ª" in messages[1].content.lower()
        assert messages[2].content == "–ò—â—É –Ω–∞—Å–æ—Å –¥–ª—è –ø–æ–ª–∏–≤–∞ –æ–≥–æ—Ä–æ–¥–∞"
        assert "–ø–æ–∫–∞–∑—ã–≤–∞—é" in messages[3].content.lower()
