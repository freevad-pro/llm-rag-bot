"""
–¢–µ—Å—Ç—ã –¥–ª—è TelegramNotifier
"""
import pytest
from unittest.mock import Mock, AsyncMock, patch
from aiogram.exceptions import TelegramAPIError

from src.infrastructure.notifications.telegram_notifier import TelegramNotifier
from src.domain.entities.lead import Lead, LeadSource


class TestTelegramNotifier:
    """–¢–µ—Å—Ç—ã –¥–ª—è TelegramNotifier"""
    
    @pytest.fixture
    def mock_bot(self):
        """–ú–æ–∫ Telegram –±–æ—Ç–∞"""
        bot = Mock()
        bot.send_message = AsyncMock()
        return bot
    
    @pytest.fixture
    def notifier(self, mock_bot):
        """–≠–∫–∑–µ–º–ø–ª—è—Ä TelegramNotifier"""
        return TelegramNotifier(mock_bot)
    
    @pytest.fixture
    def sample_lead(self):
        """–¢–µ—Å—Ç–æ–≤—ã–π –ª–∏–¥"""
        return Lead(
            id=1,
            first_name="–ò–≤–∞–Ω",
            last_name="–ü–µ—Ç—Ä–æ–≤",
            phone="+79001234567",
            email="ivan@example.com",
            telegram="@ivan_petrov",
            company="–û–û–û –¢–µ—Å—Ç",
            question="–ù—É–∂–Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –ø–æ —Ç–æ–≤–∞—Ä–∞–º",
            lead_source=LeadSource.TELEGRAM,
            auto_created=True
        )
    
    @pytest.mark.asyncio
    async def test_notify_critical_error_multiple_admins_success(self, notifier, mock_bot):
        """–¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏–º –∞–¥–º–∏–Ω–∞–º"""
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        admin_ids = [123456789, 987654321, 555666777]
        
        with patch('src.infrastructure.notifications.telegram_notifier.settings') as mock_settings:
            mock_settings.admin_telegram_ids_list = admin_ids
            
            with patch('src.infrastructure.notifications.telegram_notifier.hybrid_logger') as mock_logger:
                mock_logger.info = AsyncMock()
                mock_logger.business = AsyncMock()
                mock_logger.error = AsyncMock()
                
                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                result = await notifier.notify_critical_error(
                    "–¢–µ—Å—Ç–æ–≤–∞—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞",
                    {"component": "test", "severity": "high"}
                )
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert result is True
        assert mock_bot.send_message.call_count == 3
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω—É
        sent_to_ids = [call.kwargs['chat_id'] for call in mock_bot.send_message.call_args_list]
        assert set(sent_to_ids) == set(admin_ids)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        message_text = mock_bot.send_message.call_args_list[0].kwargs['text']
        assert "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê" in message_text
        assert "–¢–µ—Å—Ç–æ–≤–∞—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞" in message_text
        assert "component: test" in message_text
        assert "severity: high" in message_text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        assert mock_logger.info.call_count == 3  # –ü–æ –æ–¥–Ω–æ–º—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥–º–∏–Ω–∞
        assert mock_logger.business.call_count == 1  # –û–±—â–∏–π —É—Å–ø–µ—Ö
    
    @pytest.mark.asyncio
    async def test_notify_critical_error_partial_failure(self, notifier, mock_bot):
        """–¢–µ—Å—Ç —á–∞—Å—Ç–∏—á–Ω–æ–π –Ω–µ—É–¥–∞—á–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        admin_ids = [123456789, 987654321, 555666777]
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫ - –≤—Ç–æ—Ä–æ–π –∞–¥–º–∏–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω
        async def mock_send_message(chat_id, **kwargs):
            if chat_id == 987654321:
                raise TelegramAPIError("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞")
        
        mock_bot.send_message = AsyncMock(side_effect=mock_send_message)
        
        with patch('src.infrastructure.notifications.telegram_notifier.settings') as mock_settings:
            mock_settings.admin_telegram_ids_list = admin_ids
            
            with patch('src.infrastructure.notifications.telegram_notifier.hybrid_logger') as mock_logger:
                mock_logger.info = AsyncMock()
                mock_logger.business = AsyncMock()
                mock_logger.error = AsyncMock()
                mock_logger.warning = AsyncMock()
                
                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                result = await notifier.notify_critical_error("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert result is True  # –•–æ—Ç—è –±—ã –æ–¥–Ω–æ–º—É –∞–¥–º–∏–Ω—É –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ
        assert mock_bot.send_message.call_count == 3
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        assert mock_logger.info.call_count == 2  # –£—Å–ø–µ—à–Ω—ã–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
        assert mock_logger.error.call_count == 1  # –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
        assert mock_logger.business.call_count == 1  # –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç (2/3)
    
    @pytest.mark.asyncio
    async def test_notify_critical_error_all_failures(self, notifier, mock_bot):
        """–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–π –Ω–µ—É–¥–∞—á–∏ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞
        admin_ids = [123456789, 987654321]
        
        # –í—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ—É–¥–∞—á–Ω—ã
        mock_bot.send_message = AsyncMock(side_effect=TelegramAPIError("–°–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"))
        
        with patch('src.infrastructure.notifications.telegram_notifier.settings') as mock_settings:
            mock_settings.admin_telegram_ids_list = admin_ids
            
            with patch('src.infrastructure.notifications.telegram_notifier.hybrid_logger') as mock_logger:
                mock_logger.info = AsyncMock()
                mock_logger.business = AsyncMock()
                mock_logger.error = AsyncMock()
                mock_logger.warning = AsyncMock()
                
                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                result = await notifier.notify_critical_error("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert result is False
        assert mock_bot.send_message.call_count == 2
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        assert mock_logger.info.call_count == 0  # –ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤–æ–∫
        assert mock_logger.error.call_count == 3  # 2 –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ + 1 –æ–±—â–∞—è –æ—à–∏–±–∫–∞
        assert mock_logger.business.call_count == 0  # –ù–µ—Ç —É—Å–ø–µ—à–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    
    @pytest.mark.asyncio
    async def test_notify_critical_error_empty_admin_list(self, notifier, mock_bot):
        """–¢–µ—Å—Ç –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø—Ä–∏ –ø—É—Å—Ç–æ–º —Å–ø–∏—Å–∫–µ –∞–¥–º–∏–Ω–æ–≤"""
        with patch('src.infrastructure.notifications.telegram_notifier.settings') as mock_settings:
            mock_settings.admin_telegram_ids_list = []
            
            with patch('src.infrastructure.notifications.telegram_notifier.hybrid_logger') as mock_logger:
                mock_logger.warning = AsyncMock()
                
                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                result = await notifier.notify_critical_error("–¢–µ—Å—Ç–æ–≤–∞—è –æ—à–∏–±–∫–∞")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert result is False
        assert mock_bot.send_message.call_count == 0
        assert mock_logger.warning.call_count == 1
    
    @pytest.mark.asyncio
    async def test_notify_critical_error_with_context(self, notifier, mock_bot):
        """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        admin_ids = [123456789]
        
        with patch('src.infrastructure.notifications.telegram_notifier.settings') as mock_settings:
            mock_settings.admin_telegram_ids_list = admin_ids
            
            with patch('src.infrastructure.notifications.telegram_notifier.hybrid_logger') as mock_logger:
                mock_logger.info = AsyncMock()
                mock_logger.business = AsyncMock()
                
                # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
                context = {
                    "user_id": 12345,
                    "action": "catalog_search",
                    "error_code": "SEARCH_001"
                }
                result = await notifier.notify_critical_error("–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞", context)
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∏
        assert result is True
        
        message_text = mock_bot.send_message.call_args.kwargs['text']
        assert "user_id: 12345" in message_text
        assert "action: catalog_search" in message_text
        assert "error_code: SEARCH_001" in message_text
        assert "üìä –ö–æ–Ω—Ç–µ–∫—Å—Ç:" in message_text
