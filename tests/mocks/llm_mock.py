"""
–ú–æ–∫–∏ –¥–ª—è LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤ –≤ —Ç–µ—Å—Ç–∞—Ö
"""
from typing import Dict, Any, List, Optional, AsyncGenerator
from unittest.mock import AsyncMock

from src.infrastructure.llm.providers.base import LLMProvider
from src.domain.entities.lead import Lead


class MockLLMProvider(LLMProvider):
    """–ú–æ–∫ LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self, provider_name: str = "test", **kwargs):
        self.provider_name = provider_name
        self.config = kwargs
        self.call_history: List[Dict[str, Any]] = []
        self._responses = []
        self._current_response_index = 0
    
    def set_responses(self, responses: List[str]):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã"""
        self._responses = responses
        self._current_response_index = 0
    
    def add_response(self, response: str):
        """–î–æ–±–∞–≤–ª—è–µ—Ç –æ—Ç–≤–µ—Ç –≤ –æ—á–µ—Ä–µ–¥—å"""
        self._responses.append(response)
    
    def get_next_response(self) -> str:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç"""
        if self._current_response_index < len(self._responses):
            response = self._responses[self._current_response_index]
            self._current_response_index += 1
            return response
        return "–¢–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç –æ—Ç LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"
    
    async def generate_response(
        self,
        messages: List[Dict[str, str]],
        context: Optional[Dict[str, Any]] = None
    ) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç"""
        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—ã–∑–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ —Ç–µ—Å—Ç–∞—Ö
        call_data = {
            "messages": messages,
            "context": context,
            "provider": self.provider_name
        }
        self.call_history.append(call_data)
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∏–ª–∏ –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
        response = self.get_next_response()
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∑–∞–ø—Ä–æ—Å–æ–≤
        last_message = messages[-1]["content"].lower() if messages else ""
        
        if "–ø–æ–∏—Å–∫" in last_message or "–∏—â—É" in last_message or "–Ω—É–∂–µ–Ω" in last_message:
            return f"üîç –ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–∞–π–¥–µ–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä–æ–≤:\n\n{response}"
        elif "—Ü–µ–Ω–∞" in last_message or "—Å—Ç–æ–∏–º–æ—Å—Ç—å" in last_message:
            return f"üí∞ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–µ–Ω–∞—Ö:\n\n{response}"
        elif "–ø–æ–º–æ—â—å" in last_message or "–∫–∞–∫" in last_message:
            return f"üìã –†–∞–¥ –ø–æ–º–æ—á—å!\n\n{response}"
        
        return response
    
    async def generate_response_stream(
        self,
        messages: List[Dict[str, str]],
        context: Optional[Dict[str, Any]] = None
    ) -> AsyncGenerator[str, None]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ç–æ–∫–æ–≤—ã–π –æ—Ç–≤–µ—Ç"""
        response = await self.generate_response(messages, context)
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º –ø–æ—Ç–æ–∫–æ–≤—É—é –æ—Ç–¥–∞—á—É –ø–æ —Å–ª–æ–≤–∞–º
        words = response.split()
        for word in words:
            yield word + " "
    
    async def is_healthy(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –º–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        return True
    
    def get_model_info(self) -> Dict[str, Any]:
        """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–æ–¥–µ–ª–∏"""
        return {
            "provider": self.provider_name,
            "model": "test-model",
            "max_tokens": 4000,
            "supports_streaming": True
        }
    
    def clear_history(self):
        """–û—á–∏—â–∞–µ—Ç –∏—Å—Ç–æ—Ä–∏—é –≤—ã–∑–æ–≤–æ–≤"""
        self.call_history.clear()
        self._current_response_index = 0


class MockTelegramNotifier:
    """–ú–æ–∫ –¥–ª—è Telegram —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    
    def __init__(self):
        self.sent_notifications: List[Dict[str, Any]] = []
    
    async def notify_new_lead(self, lead: Lead, user_id: int):
        """–ú–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ª–∏–¥–µ"""
        notification = {
            "type": "new_lead",
            "lead_id": lead.id,
            "user_id": user_id,
            "lead_name": lead.name,
            "timestamp": "2025-09-14T12:00:00"
        }
        self.sent_notifications.append(notification)
    
    async def notify_error(self, error_message: str, context: Optional[Dict] = None):
        """–ú–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ"""
        notification = {
            "type": "error",
            "message": error_message,
            "context": context,
            "timestamp": "2025-09-14T12:00:00"
        }
        self.sent_notifications.append(notification)
    
    def clear_notifications(self):
        """–û—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        self.sent_notifications.clear()


class MockCRMService:
    """–ú–æ–∫ –¥–ª—è CRM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ (Zoho)"""
    
    def __init__(self):
        self.created_leads: List[Dict[str, Any]] = []
        self.should_fail = False
        self.failure_message = "Test CRM failure"
    
    def set_failure(self, should_fail: bool, message: str = "Test CRM failure"):
        """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –º–æ–∫ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –æ—à–∏–±–∫–∏"""
        self.should_fail = should_fail
        self.failure_message = message
    
    async def create_lead(self, lead_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ú–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ª–∏–¥–∞ –≤ CRM"""
        if self.should_fail:
            raise Exception(self.failure_message)
        
        # –ò–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –≤ Zoho
        zoho_lead = {
            "id": f"zoho_{len(self.created_leads) + 1000000}",
            "status": "created",
            "data": lead_data,
            "created_at": "2025-09-14T12:00:00Z"
        }
        
        self.created_leads.append(zoho_lead)
        return zoho_lead
    
    async def update_lead(self, lead_id: str, update_data: Dict[str, Any]) -> Dict[str, Any]:
        """–ú–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ª–∏–¥–∞ –≤ CRM"""
        if self.should_fail:
            raise Exception(self.failure_message)
        
        # –ù–∞—Ö–æ–¥–∏–º –ª–∏–¥ –ø–æ ID –∏ –æ–±–Ω–æ–≤–ª—è–µ–º
        for lead in self.created_leads:
            if lead["id"] == lead_id:
                lead["data"].update(update_data)
                lead["updated_at"] = "2025-09-14T12:00:00Z"
                return lead
        
        raise Exception(f"Lead {lead_id} not found")
    
    def clear_leads(self):
        """–û—á–∏—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–æ–≤"""
        self.created_leads.clear()


# –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–æ–∫–æ–≤ –≤ —Ç–µ—Å—Ç–∞—Ö
def create_mock_llm_conversation():
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ —Å –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º –¥–∏–∞–ª–æ–≥–æ–º"""
    mock = MockLLMProvider("test")
    mock.set_responses([
        "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?",
        "–ö–æ–Ω–µ—á–Ω–æ, –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –Ω–∞—Å–æ—Å.",
        "–£ –Ω–∞—Å –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–∞—Å–æ—Å–æ–≤ –¥–ª—è –¥–∞—á–∏. –ö–∞–∫–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –≤–∞–∂–Ω—ã?",
        "–û—Ç–ª–∏—á–Ω–æ! –†–µ–∫–æ–º–µ–Ω–¥—É—é –æ–±—Ä–∞—Ç–∏—Ç—å—Å—è –∫ –Ω–∞—à–µ–º—É –º–µ–Ω–µ–¥–∂–µ—Ä—É –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏."
    ])
    return mock


def create_search_mock_responses():
    """–°–æ–∑–¥–∞–µ—Ç –º–æ–∫ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –ø–æ–∏—Å–∫–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
    return [
        "üîç –ù–∞–π–¥–µ–Ω–æ 5 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É '–Ω–∞—Å–æ—Å':\n\n1. –ù–∞—Å–æ—Å —Ü–∏—Ä–∫—É–ª—è—Ü–∏–æ–Ω–Ω—ã–π GRUNDFOS UPS 25-40\n2. –ù–∞—Å–æ—Å –¥—Ä–µ–Ω–∞–∂–Ω—ã–π –î–ñ–ò–õ–ï–ö–°...",
        "üìã –ü–æ–∫–∞–∑—ã–≤–∞—é –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–∞:\n\n–ù–∞—Å–æ—Å —Ü–∏—Ä–∫—É–ª—è—Ü–∏–æ–Ω–Ω—ã–π GRUNDFOS UPS 25-40\n–¶–µ–Ω–∞: 15 000 —Ä—É–±.\n–•–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏: ...",
        "üí∞ –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ –Ω–∞—Å–æ—Å—ã:\n\n- –¶–∏—Ä–∫—É–ª—è—Ü–∏–æ–Ω–Ω—ã–µ: –æ—Ç 8 000 —Ä—É–±.\n- –î—Ä–µ–Ω–∞–∂–Ω—ã–µ: –æ—Ç 12 000 —Ä—É–±.",
    ]


# –§–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è pytest
def create_test_fixtures():
    """–°–æ–∑–¥–∞–µ—Ç –Ω–∞–±–æ—Ä –º–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
    return {
        "llm_provider": MockLLMProvider(),
        "telegram_notifier": MockTelegramNotifier(),
        "crm_service": MockCRMService()
    }
