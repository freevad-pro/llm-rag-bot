#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Ç–∏–ª–∏—Ç —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º.
–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫.
"""
import sys
import os

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ src –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

from infrastructure.utils.text_utils import escape_braces, safe_format


def test_escape_braces():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é escape_braces"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ escape_braces...")
    
    # –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç—ã–µ —Ñ–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏
    text1 = "–ù–∞–π–¥–∏ —Ç–æ–≤–∞—Ä {–∞—Ä—Ç–∏–∫—É–ª}"
    result1 = escape_braces(text1)
    expected1 = "–ù–∞–π–¥–∏ —Ç–æ–≤–∞—Ä {{–∞—Ä—Ç–∏–∫—É–ª}}"
    assert result1 == expected1, f"–û–∂–∏–¥–∞–ª–æ—Å—å: {expected1}, –ø–æ–ª—É—á–µ–Ω–æ: {result1}"
    print("‚úÖ –¢–µ—Å—Ç 1: –ü—Ä–æ—Å—Ç—ã–µ —Ñ–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏")
    
    # –¢–µ—Å—Ç 2: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∫–æ–±–∫–∏
    text2 = "–¶–µ–Ω–∞: {price} —Ä—É–±., —Å–∫–∏–¥–∫–∞: {discount}%"
    result2 = escape_braces(text2)
    expected2 = "–¶–µ–Ω–∞: {{price}} —Ä—É–±., —Å–∫–∏–¥–∫–∞: {{discount}}%"
    assert result2 == expected2, f"–û–∂–∏–¥–∞–ª–æ—Å—å: {expected2}, –ø–æ–ª—É—á–µ–Ω–æ: {result2}"
    print("‚úÖ –¢–µ—Å—Ç 2: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∫–æ–±–∫–∏")
    
    # –¢–µ—Å—Ç 3: –í–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–∫–æ–±–∫–∏
    text3 = "–û–±—ä–µ–∫—Ç: {data: {value}}"
    result3 = escape_braces(text3)
    expected3 = "–û–±—ä–µ–∫—Ç: {{data: {{value}}}}"
    assert result3 == expected3, f"–û–∂–∏–¥–∞–ª–æ—Å—å: {expected3}, –ø–æ–ª—É—á–µ–Ω–æ: {result3}"
    print("‚úÖ –¢–µ—Å—Ç 3: –í–ª–æ–∂–µ–Ω–Ω—ã–µ —Å–∫–æ–±–∫–∏")
    
    # –¢–µ—Å—Ç 4: –ü—É—Å—Ç—ã–µ —Å–∫–æ–±–∫–∏
    text4 = "–ü—É—Å—Ç—ã–µ —Å–∫–æ–±–∫–∏: {}"
    result4 = escape_braces(text4)
    expected4 = "–ü—É—Å—Ç—ã–µ —Å–∫–æ–±–∫–∏: {{}}"
    assert result4 == expected4, f"–û–∂–∏–¥–∞–ª–æ—Å—å: {expected4}, –ø–æ–ª—É—á–µ–Ω–æ: {result4}"
    print("‚úÖ –¢–µ—Å—Ç 4: –ü—É—Å—Ç—ã–µ —Å–∫–æ–±–∫–∏")
    
    # –¢–µ—Å—Ç 5: –ë–µ–∑ —Å–∫–æ–±–æ–∫
    text5 = "–û–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç –±–µ–∑ —Å–∫–æ–±–æ–∫"
    result5 = escape_braces(text5)
    assert result5 == text5, f"–û–∂–∏–¥–∞–ª–æ—Å—å: {text5}, –ø–æ–ª—É—á–µ–Ω–æ: {result5}"
    print("‚úÖ –¢–µ—Å—Ç 5: –¢–µ–∫—Å—Ç –±–µ–∑ —Å–∫–æ–±–æ–∫")
    
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã escape_braces –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")


def test_safe_format():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏—é safe_format"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ safe_format...")
    
    # –¢–µ—Å—Ç 1: –§–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏ –≤ –∑–Ω–∞—á–µ–Ω–∏–∏
    template1 = "–ó–∞–ø—Ä–æ—Å: {query}, –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}"
    result1 = safe_format(template1, query="–ù–∞–π–¥–∏ {—Ç–æ–≤–∞—Ä}", result="OK")
    expected1 = "–ó–∞–ø—Ä–æ—Å: –ù–∞–π–¥–∏ {{—Ç–æ–≤–∞—Ä}}, –†–µ–∑—É–ª—å—Ç–∞—Ç: OK"
    assert result1 == expected1, f"–û–∂–∏–¥–∞–ª–æ—Å—å: {expected1}, –ø–æ–ª—É—á–µ–Ω–æ: {result1}"
    print("‚úÖ –¢–µ—Å—Ç 1: –§–∏–≥—É—Ä–Ω—ã–µ —Å–∫–æ–±–∫–∏ –≤ –∑–Ω–∞—á–µ–Ω–∏–∏")
    
    # –¢–µ—Å—Ç 2: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∫–æ–±–∫–∏
    template2 = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}, –ó–∞–ø—Ä–æ—Å: {query}"
    result2 = safe_format(template2, user="admin", query="SELECT * FROM {table}")
    expected2 = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: admin, –ó–∞–ø—Ä–æ—Å: SELECT * FROM {{table}}"
    assert result2 == expected2, f"–û–∂–∏–¥–∞–ª–æ—Å—å: {expected2}, –ø–æ–ª—É—á–µ–Ω–æ: {result2}"
    print("‚úÖ –¢–µ—Å—Ç 2: –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∫–æ–±–∫–∏")
    
    # –¢–µ—Å—Ç 3: –ë–µ–∑ —Å–∫–æ–±–æ–∫
    template3 = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user}, –ó–∞–ø—Ä–æ—Å: {query}"
    result3 = safe_format(template3, user="admin", query="SELECT * FROM users")
    expected3 = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: admin, –ó–∞–ø—Ä–æ—Å: SELECT * FROM users"
    assert result3 == expected3, f"–û–∂–∏–¥–∞–ª–æ—Å—å: {expected3}, –ø–æ–ª—É—á–µ–Ω–æ: {result3}"
    print("‚úÖ –¢–µ—Å—Ç 3: –ë–µ–∑ —Å–∫–æ–±–æ–∫ –≤ –∑–Ω–∞—á–µ–Ω–∏—è—Ö")
    
    # –¢–µ—Å—Ç 4: –ù–µ-—Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
    template4 = "ID: {id}, –ê–∫—Ç–∏–≤–µ–Ω: {active}, –¶–µ–Ω–∞: {price}"
    result4 = safe_format(template4, id=123, active=True, price=99.99)
    expected4 = "ID: 123, –ê–∫—Ç–∏–≤–µ–Ω: True, –¶–µ–Ω–∞: 99.99"
    assert result4 == expected4, f"–û–∂–∏–¥–∞–ª–æ—Å—å: {expected4}, –ø–æ–ª—É—á–µ–Ω–æ: {result4}"
    print("‚úÖ –¢–µ—Å—Ç 4: –ù–µ-—Å—Ç—Ä–æ–∫–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è")
    
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã safe_format –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")


def test_real_world_scenarios():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ —Å—Ü–µ–Ω–∞—Ä–∏–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤...")
    
    # –¢–µ—Å—Ç 1: JSON-–ø–æ–¥–æ–±–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
    query1 = '–ù–∞–π–¥–∏ —Ç–æ–≤–∞—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {"color": "red", "size": "large"}'
    template1 = "–ü–æ–∏—Å–∫: {query}"
    result1 = safe_format(template1, query=query1)
    expected1 = '–ü–æ–∏—Å–∫: –ù–∞–π–¥–∏ —Ç–æ–≤–∞—Ä —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ {{"color": "red", "size": "large"}}'
    assert result1 == expected1, f"–û–∂–∏–¥–∞–ª–æ—Å—å: {expected1}, –ø–æ–ª—É—á–µ–Ω–æ: {result1}"
    print("‚úÖ –¢–µ—Å—Ç 1: JSON-–ø–æ–¥–æ–±–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å")
    
    # –¢–µ—Å—Ç 2: –®–∞–±–ª–æ–Ω–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å
    query2 = "–ü–æ–∫–∞–∂–∏ —Ç–æ–≤–∞—Ä—ã –≥–¥–µ —Ü–µ–Ω–∞ = {price} –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è = {category}"
    template2 = "–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_query}"
    result2 = safe_format(template2, user_query=query2)
    expected2 = "–ó–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –ü–æ–∫–∞–∂–∏ —Ç–æ–≤–∞—Ä—ã –≥–¥–µ —Ü–µ–Ω–∞ = {{price}} –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è = {{category}}"
    assert result2 == expected2, f"–û–∂–∏–¥–∞–ª–æ—Å—å: {expected2}, –ø–æ–ª—É—á–µ–Ω–æ: {result2}"
    print("‚úÖ –¢–µ—Å—Ç 2: –®–∞–±–ª–æ–Ω–Ω—ã–π —Å–∏–Ω—Ç–∞–∫—Å–∏—Å")
    
    # –¢–µ—Å—Ç 3: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç
    user_query3 = "–ù–∞–π–¥–∏ {—Ç–æ–≤–∞—Ä} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º {value}"
    classification_prompt = """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
        
–ó–∞–ø—Ä–æ—Å: {query}

–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:"""
    
    result3 = safe_format(classification_prompt, query=user_query3)
    expected3 = """–ö–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
        
–ó–∞–ø—Ä–æ—Å: –ù–∞–π–¥–∏ {{—Ç–æ–≤–∞—Ä}} —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–º {{value}}

–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è:"""
    
    assert result3 == expected3, f"–û–∂–∏–¥–∞–ª–æ—Å—å: {expected3}, –ø–æ–ª—É—á–µ–Ω–æ: {result3}"
    print("‚úÖ –¢–µ—Å—Ç 3: –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –ø—Ä–æ–º–ø—Ç")
    
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã —Ä–µ–∞–ª—å–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤ –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")


def test_json_serialization():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏...")
    
    import json
    
    # –°–∏–º—É–ª–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞–Ω—å—à–µ –ª–æ–º–∞–ª–∏—Å—å
    usage_data = {"prompt_tokens": 10, "completion_tokens": 20, "total_tokens": 30}
    model_name = "gpt-3.5-turbo"
    
    # –ù–æ–≤—ã–π —Å–ø–æ—Å–æ–± (–∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π)
    new_extra_data = json.dumps({
        "model": model_name,
        "usage": usage_data
    })
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–æ–≤—ã–π —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–µ—Ç –≤–∞–ª–∏–¥–Ω—ã–π JSON
    parsed_data = json.loads(new_extra_data)
    assert parsed_data['model'] == model_name
    assert parsed_data['usage']['total_tokens'] == 30
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∞–ª–∏–¥–Ω—ã–π JSON
    assert isinstance(parsed_data, dict)
    assert 'model' in parsed_data
    assert 'usage' in parsed_data
    
    print("‚úÖ JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ!")


def main():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –¥–ª—è —É—Ç–∏–ª–∏—Ç —Ä–∞–±–æ—Ç—ã —Å —Ç–µ–∫—Å—Ç–æ–º")
    print("=" * 60)
    
    try:
        test_escape_braces()
        test_safe_format()
        test_real_world_scenarios()
        test_json_serialization()
        
        print("\n" + "=" * 60)
        print("üéâ –í–°–ï –¢–ï–°–¢–´ –ü–†–û–®–õ–ò –£–°–ü–ï–®–ù–û!")
        print("‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∏–≥—É—Ä–Ω—ã—Ö —Å–∫–æ–±–æ–∫ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        print("‚úÖ JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û–®–ò–ë–ö–ê –í –¢–ï–°–¢–ê–•: {e}")
        import traceback
        traceback.print_exc()
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
