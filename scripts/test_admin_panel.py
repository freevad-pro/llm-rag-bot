#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –ª–æ–∫–∞–ª—å–Ω–æ.
–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å.
"""
import asyncio
import sys
import os
import requests
import time
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, text

from src.infrastructure.database.connection import get_async_session
from src.infrastructure.database.models import AdminUser as AdminUserModel, User, Conversation, Message
from src.infrastructure.logging.hybrid_logger import hybrid_logger


async def create_test_admin_users():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–¥–º–∏–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    print("üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–¥–º–∏–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    
    test_users = [
        {"telegram_id": 123456789, "role": "ADMIN", "username": "test_admin", "first_name": "Test", "last_name": "Admin"},
        {"telegram_id": 111111111, "role": "MANAGER", "username": "test_manager", "first_name": "Test", "last_name": "Manager"},
    ]
    
    async for session in get_async_session():
        try:
            created_count = 0
            
            for user_data in test_users:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ
                stmt = select(AdminUserModel).where(AdminUserModel.telegram_id == user_data["telegram_id"])
                result = await session.execute(stmt)
                existing = result.scalar_one_or_none()
                
                if existing:
                    print(f"‚úì {user_data['role']} {user_data['telegram_id']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    continue
                
                admin_user = AdminUserModel(
                    telegram_id=user_data["telegram_id"],
                    telegram_username=user_data["username"],
                    first_name=user_data["first_name"],
                    last_name=user_data["last_name"],
                    role=user_data["role"],
                    is_active=True
                )
                session.add(admin_user)
                created_count += 1
                print(f"‚úì –°–æ–∑–¥–∞–Ω {user_data['role']}: {user_data['telegram_id']} (@{user_data['username']})")
            
            if created_count > 0:
                await session.commit()
                print(f"üéâ –°–æ–∑–¥–∞–Ω–æ {created_count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–¥–º–∏–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            
            return True
            
        except Exception as e:
            await session.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return False


async def create_test_data():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    async for session in get_async_session():
        try:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–æ—Ç–∞
            stmt = select(User).where(User.chat_id == 999999999)
            result = await session.execute(stmt)
            existing_user = result.scalar_one_or_none()
            
            if not existing_user:
                test_user = User(
                    chat_id=999999999,
                    telegram_user_id=999999999,
                    username="test_bot_user",
                    first_name="Test",
                    last_name="User"
                )
                session.add(test_user)
                await session.flush()
                
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
                test_conversation = Conversation(
                    chat_id=999999999,
                    user_id=test_user.id,
                    platform="telegram",
                    status="active"
                )
                session.add(test_conversation)
                await session.flush()
                
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                test_messages = [
                    {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏ –æ –≤–∞—à–∏—Ö —É—Å–ª—É–≥–∞—Ö"},
                    {"role": "assistant", "content": "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú—ã –∑–∞–Ω–∏–º–∞–µ–º—Å—è –ø–æ—Å—Ç–∞–≤–∫–∞–º–∏ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è –∏–∑ –ö–∏—Ç–∞—è. –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?"},
                    {"role": "user", "content": "–ù—É–∂–Ω—ã –±–æ–ª—Ç—ã –ú12"},
                    {"role": "assistant", "content": "–ü–æ–Ω—è–ª! –ë–æ–ª—Ç—ã –ú12. –£—Ç–æ—á–Ω–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ –º–∞—Ç–µ—Ä–∏–∞–ª—É."},
                ]
                
                for msg_data in test_messages:
                    message = Message(
                        conversation_id=test_conversation.id,
                        role=msg_data["role"],
                        content=msg_data["content"]
                    )
                    session.add(message)
                
                await session.commit()
                print("‚úì –°–æ–∑–¥–∞–Ω—ã —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –¥–∏–∞–ª–æ–≥, —Å–æ–æ–±—â–µ–Ω–∏—è")
            else:
                print("‚úì –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
            
            return True
            
        except Exception as e:
            await session.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
            return False


async def check_database_connection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    print("üóÑÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    
    try:
        async for session in get_async_session():
            # –ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            result = await session.execute(text("SELECT 1"))
            result.fetchone()
            print("‚úì –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
            tables_to_check = ["users", "admin_users", "conversations", "messages", "prompts"]
            for table in tables_to_check:
                try:
                    result = await session.execute(text(f"SELECT COUNT(*) FROM {table}"))
                    count = result.scalar()
                    print(f"‚úì –¢–∞–±–ª–∏—Ü–∞ {table}: {count} –∑–∞–ø–∏—Å–µ–π")
                except Exception as e:
                    print(f"‚ùå –¢–∞–±–ª–∏—Ü–∞ {table}: {e}")
            
            return True
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        return False


def check_web_server():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞"""
    print("üåê –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")
    
    base_url = "http://localhost:8000"
    
    endpoints_to_check = [
        ("/", "–ö–æ—Ä–Ω–µ–≤–æ–π endpoint"),
        ("/health", "Health check"),
        ("/admin/login", "–°—Ç—Ä–∞–Ω–∏—Ü–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∫–∏"),
        ("/api/info", "API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"),
    ]
    
    success_count = 0
    
    for endpoint, description in endpoints_to_check:
        try:
            response = requests.get(f"{base_url}{endpoint}", timeout=5)
            if response.status_code == 200:
                print(f"‚úì {description}: HTTP {response.status_code}")
                success_count += 1
            else:
                print(f"‚ö†Ô∏è  {description}: HTTP {response.status_code}")
        except requests.exceptions.RequestException as e:
            print(f"‚ùå {description}: {e}")
    
    return success_count == len(endpoints_to_check)


def print_test_instructions():
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\n" + "="*60)
    print("üß™ –ò–ù–°–¢–†–£–ö–¶–ò–ò –ü–û –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò")
    print("="*60)
    
    print("\n1. üåê –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ –∞–¥—Ä–µ—Å—É:")
    print("   http://localhost:8000/admin/")
    
    print("\n2. üîê –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:")
    print("   - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–∫–∞–∂–µ—Ç —Ñ–æ—Ä–º—É –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ Telegram")
    print("   - –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω—É–∂–µ–Ω —Ä–µ–∞–ª—å–Ω—ã–π Telegram –±–æ—Ç")
    print("   - –ó–∞–º–µ–Ω–∏—Ç–µ –≤ env.test –Ω–∞ –≤–∞—à–∏ —Ä–µ–∞–ª—å–Ω—ã–µ Telegram ID")
    
    print("\n3. üéõÔ∏è  –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏):")
    print("   - /admin/           - –ì–ª–∞–≤–Ω–∞—è –ø–∞–Ω–µ–ª—å")
    print("   - /admin/profile    - –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    print("   - /admin/login      - –°—Ç—Ä–∞–Ω–∏—Ü–∞ –≤—Ö–æ–¥–∞")
    
    print("\n4. üß™ –¢–µ—Å—Ç–æ–≤—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–æ–∑–¥–∞–Ω—ã:")
    print("   - –ê–¥–º–∏–Ω: 123456789 (Test Admin)")
    print("   - –ú–µ–Ω–µ–¥–∂–µ—Ä: 111111111 (Test Manager)")
    
    print("\n5. üìä –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç—É:")
    print("   - –ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ (–∏–∑–º–µ–Ω–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞)")
    print("   - –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–µ –º–µ–Ω—é")
    print("   - –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏")
    print("   - –ö–Ω–æ–ø–∫–∏ –±—ã—Å—Ç—Ä—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π")
    
    print("\n6. üîß API endpoints –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
    print("   - GET  /health         - –°–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã")
    print("   - GET  /api/info       - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ")
    print("   - GET  /admin/api/user-info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (—Ç—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)")
    
    print("\n7. üêõ –ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –æ—à–∏–±–æ–∫:")
    print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker-compose logs app")
    print("   - –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ë–î: docker-compose logs postgres")
    print("   - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ: docker-compose restart")
    
    print("\n" + "="*60)


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ü–û–î–ì–û–¢–û–í–ö–ê –ö –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Æ –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–ò")
    print("="*50)
    
    # –ñ–¥–µ–º –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    print("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞...")
    for i in range(30):  # 30 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
        try:
            response = requests.get("http://localhost:8000/health", timeout=2)
            if response.status_code == 200:
                print("‚úì –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω!")
                break
        except:
            pass
        time.sleep(1)
        if i % 5 == 0:
            print(f"   –ü–æ–ø—ã—Ç–∫–∞ {i+1}/30...")
    else:
        print("‚ùå –í–µ–±-—Å–µ—Ä–≤–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ 30 —Å–µ–∫—É–Ω–¥")
        print("   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ: docker-compose logs app")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    if not await check_database_connection():
        print("‚ùå –ü—Ä–æ–±–ª–µ–º–∞ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö")
        return False
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if not await create_test_admin_users():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–¥–º–∏–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
        return False
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    if not await create_test_data():
        print("‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (–Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ)")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    if not check_web_server():
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ endpoints –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
    
    print("\n‚úÖ –ü–û–î–ì–û–¢–û–í–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê!")
    print_test_instructions()
    
    return True


if __name__ == "__main__":
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ env.test
    import subprocess
    import shlex
    
    print("üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ env.test")
    
    asyncio.run(main())


