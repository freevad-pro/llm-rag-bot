#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ —á–µ—Ä–µ–∑ Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä.
–û–±–Ω–æ–≤–ª—è–µ—Ç –ø—Ä–æ–º–ø—Ç—ã –ø—Ä—è–º–æ –≤ running –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
"""
import json
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–µ–Ω—å –ø—Ä–æ–µ–∫—Ç–∞ –≤ –ø—É—Ç—å
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from src.infrastructure.llm.services.improved_prompts import IMPROVED_PROMPTS

def create_sql_script():
    """–°–æ–∑–¥–∞–µ—Ç SQL —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤."""
    
    sql_lines = [
        "-- –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –ò–ò-–±–æ—Ç–∞ KeTai Consulting",
        "-- –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω",
        "",
        "-- –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ–º–ø—Ç—ã",
        "UPDATE prompts SET active = false;",
        "",
        "-- –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —É–ª—É—á—à–µ–Ω–Ω—ã–µ –ø—Ä–æ–º–ø—Ç—ã",
    ]
    
    for prompt_name, prompt_content in IMPROVED_PROMPTS.items():
        # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –æ–¥–∏–Ω–∞—Ä–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏ –¥–ª—è SQL
        escaped_content = prompt_content.replace("'", "''")
        
        sql_lines.extend([
            f"-- –ü—Ä–æ–º–ø—Ç: {prompt_name}",
            f"INSERT INTO prompts (name, content, version, active, created_at, updated_at) VALUES (",
            f"    '{prompt_name}',",
            f"    '{escaped_content}',",
            f"    1,",
            f"    true,",
            f"    NOW(),",
            f"    NOW()",
            f");",
            ""
        ])
    
    return "\n".join(sql_lines)

def save_sql_script():
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç SQL —Å–∫—Ä–∏–ø—Ç –≤ —Ñ–∞–π–ª."""
    sql_content = create_sql_script()
    
    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    temp_dir = project_root / "temp"
    temp_dir.mkdir(exist_ok=True)
    
    sql_file = temp_dir / "update_prompts.sql"
    
    with open(sql_file, 'w', encoding='utf-8') as f:
        f.write(sql_content)
    
    return sql_file

def print_manual_instructions():
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è."""
    print("""
ü§ñ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤ –ò–ò-–±–æ—Ç–∞ KeTai Consulting

–°–ø–æ—Å–æ–±—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤:

1Ô∏è‚É£ –ß–µ—Ä–µ–∑ Docker (—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è):
   docker-compose exec postgres psql -U postgres -d catalog_db -f /tmp/update_prompts.sql

2Ô∏è‚É£ –ß–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É (–≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å):
   - –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:8000
   - –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª "–ü—Ä–æ–º–ø—Ç—ã"
   - –û–±–Ω–æ–≤–∏—Ç–µ –∫–∞–∂–¥—ã–π –ø—Ä–æ–º–ø—Ç –≤—Ä—É—á–Ω—É—é

3Ô∏è‚É£ –†—É—á–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL:
   - –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –±–∞–∑–µ: docker-compose exec postgres psql -U postgres -d catalog_db
   - –í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—ã –∏–∑ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞

üìã –°–ø–∏—Å–æ–∫ –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:
""")
    
    for i, prompt_name in enumerate(IMPROVED_PROMPTS.keys(), 1):
        print(f"   {i:2d}. {prompt_name}")
    
    print(f"""
üìÅ SQL —Å–∫—Ä–∏–ø—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: temp/update_prompts.sql

üí° –î–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ Docker:
   1. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ SQL —Ñ–∞–π–ª –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä:
      docker cp temp/update_prompts.sql llm-rag-bot-postgres-1:/tmp/
   
   2. –í—ã–ø–æ–ª–Ω–∏—Ç–µ SQL —Å–∫—Ä–∏–ø—Ç:
      docker-compose exec postgres psql -U postgres -d catalog_db -f /tmp/update_prompts.sql

‚úÖ –ü–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:
   docker-compose restart app
""")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    
    print("üöÄ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º SQL —Å–∫—Ä–∏–ø—Ç
        sql_file = save_sql_script()
        print(f"‚úÖ SQL —Å–∫—Ä–∏–ø—Ç —Å–æ–∑–¥–∞–Ω: {sql_file}")
        
        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        print_manual_instructions()
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–∫—Ä–∏–ø—Ç–∞: {e}")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
