#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ò–ò-–±–æ—Ç–∞ (Zero-downtime deployment)
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./scripts/update.sh [--force]

set -e  # –í—ã—Ö–æ–¥ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
BOT_DIR="/opt/llm-bot"
APP_DIR="$BOT_DIR/app"
DATA_DIR="$BOT_DIR/data"
SCRIPTS_DIR="$BOT_DIR/scripts"
BACKUP_DIR="$BOT_DIR/backups"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤
[ ! -d "$APP_DIR" ] && error "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è $APP_DIR –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
[ ! -f "$APP_DIR/docker-compose.prod.yml" ] && error "–§–∞–π–ª docker-compose.prod.yml –Ω–µ –Ω–∞–π–¥–µ–Ω"

log "üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ò–ò-–±–æ—Ç–∞..."

cd $APP_DIR

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
log "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å..."
if ! docker-compose -f docker-compose.prod.yml ps | grep -q "Up"; then
    warning "–°–µ—Ä–≤–∏—Å—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã. –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–Ω—ã–π —Å—Ç–∞—Ä—Ç..."
    docker-compose -f docker-compose.prod.yml up -d
    exit 0
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ Git (–µ—Å–ª–∏ –Ω–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ)
if [ "$1" != "--force" ] && [ "$1" != "--force-overwrite" ]; then
    log "üì° –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π..."
    git fetch origin
    
    LOCAL=$(git rev-parse HEAD)
    REMOTE=$(git rev-parse origin/main)
    
    if [ "$LOCAL" = "$REMOTE" ]; then
        log "‚ÑπÔ∏è  –û–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞."
        log "   –î–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:"
        log "   $0 --force              (—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)"
        log "   $0 --force-overwrite    (–ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è)"
        exit 0
    fi
    
    log "üì• –ù–∞–π–¥–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è. –ü–æ–ª—É—á–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è..."
    git log --oneline HEAD..origin/main | head -10
    echo
fi

# –°–æ–∑–¥–∞–µ–º backup –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
log "üì¶ –°–æ–∑–¥–∞–µ–º backup –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º..."
if [ -f "$SCRIPTS_DIR/backup.sh" ]; then
    $SCRIPTS_DIR/backup.sh
    success "‚úÖ Backup —Å–æ–∑–¥–∞–Ω"
else
    warning "‚ö†Ô∏è  –°–∫—Ä–∏–ø—Ç backup.sh –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ backup"
fi

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
CURRENT_COMMIT=$(git rev-parse HEAD)
CURRENT_IMAGE_ID=$(docker images --format "table {{.ID}}" | grep -v "IMAGE" | head -1)

log "üìù –¢–µ–∫—É—â–∞—è –≤–µ—Ä—Å–∏—è: $(git rev-parse --short HEAD)"
log "üìù –û–±—Ä–∞–∑: $CURRENT_IMAGE_ID"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π
log "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è..."
if ! git diff-index --quiet HEAD --; then
    warning "‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–∞—Ö:"
    git diff --name-only HEAD
    echo
    
    if [ "$1" = "--force-overwrite" ]; then
        warning "üî® –†–µ–∂–∏–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏ - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è..."
        git stash push -m "Auto-stash before force update $(date)" || true
        git reset --hard HEAD
    elif [ "$1" = "--force" ]; then
        log "üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ stash..."
        git stash push -m "Auto-stash before update $(date)"
        success "‚úÖ –õ–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ stash"
    else
        error "‚ùå –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:
  $0              - –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (–æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –ø—Ä–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞—Ö)
  $0 --force      - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ stash –∏ –æ–±–Ω–æ–≤–∏—Ç—å
  $0 --force-overwrite - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –≤—Å–µ –ª–æ–∫–∞–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"
    fi
fi

# –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–¥
log "üì• –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ Git..."
git pull origin main

NEW_COMMIT=$(git rev-parse HEAD)
log "üìù –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: $(git rev-parse --short HEAD)"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–∑–º–µ–Ω–∏–ª–∏—Å—å –ª–∏ —Ñ–∞–π–ª—ã, —Ç—Ä–µ–±—É—é—â–∏–µ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏ –æ–±—Ä–∞–∑–∞
REBUILD_NEEDED=false

if git diff --name-only $CURRENT_COMMIT $NEW_COMMIT | grep -qE "(Dockerfile|pyproject.toml|requirements.*\.txt)"; then
    log "üèóÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—è—Ö, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞..."
    REBUILD_NEEDED=true
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ docker-compose.prod.yml
if git diff --name-only $CURRENT_COMMIT $NEW_COMMIT | grep -q "docker-compose.prod.yml"; then
    log "‚öôÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Docker Compose –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    REBUILD_NEEDED=true
fi

# –ï—Å–ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º
if [ "$1" = "--force" ] || [ "$1" = "--force-overwrite" ]; then
    REBUILD_NEEDED=true
    log "üî® –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ - –ø–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑..."
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
log "‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–æ–≤–æ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
if ! docker-compose -f docker-compose.prod.yml config > /dev/null; then
    error "‚ùå –ù–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Docker Compose –Ω–µ–≤–∞–ª–∏–¥–Ω–∞!"
fi

# –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –æ–±—Ä–∞–∑ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
if [ "$REBUILD_NEEDED" = true ]; then
    log "üèóÔ∏è –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤—ã–π Docker –æ–±—Ä–∞–∑..."
    docker-compose -f docker-compose.prod.yml build app
    success "‚úÖ –ù–æ–≤—ã–π –æ–±—Ä–∞–∑ —Å–æ–±—Ä–∞–Ω"
else
    log "‚ÑπÔ∏è  –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è"
fi

# –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ–≥–æ –æ–±—Ä–∞–∑–∞
NEW_IMAGE_ID=$(docker images --format "table {{.ID}}" | grep -v "IMAGE" | head -1)

# –°–æ–∑–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–∫–∞—Ç–∞
rollback() {
    warning "üîÑ –í—ã–ø–æ–ª–Ω—è–µ–º –æ—Ç–∫–∞—Ç –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏..."
    
    # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º –∫–æ–¥
    git reset --hard $CURRENT_COMMIT
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã
    docker-compose -f docker-compose.prod.yml stop app
    
    # –ï—Å–ª–∏ –±—ã–ª —Å–æ–±—Ä–∞–Ω –Ω–æ–≤—ã–π –æ–±—Ä–∞–∑, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å—Ç–∞—Ä–æ–º—É
    if [ "$REBUILD_NEEDED" = true ] && [ "$NEW_IMAGE_ID" != "$CURRENT_IMAGE_ID" ]; then
        docker rmi $NEW_IMAGE_ID 2>/dev/null || true
        log "üèóÔ∏è –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤–µ—Ä—Å–∏—é..."
        docker-compose -f docker-compose.prod.yml build app
    fi
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤–µ—Ä—Å–∏—é
    docker-compose -f docker-compose.prod.yml up -d app
    
    error "‚ùå –û—Ç–∫–∞—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –∏ —É—Å—Ç—Ä–∞–Ω–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã."
}

# –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ (–ë–î –æ—Å—Ç–∞–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞—Ç—å)
log "‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ..."
docker-compose -f docker-compose.prod.yml stop app

log "‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—É—é –≤–µ—Ä—Å–∏—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
docker-compose -f docker-compose.prod.yml up -d app

# –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
log "üóÉÔ∏è –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö..."
sleep 10  # –î–∞–µ–º –≤—Ä–µ–º—è –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—É –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è
if docker-compose -f docker-compose.prod.yml exec -T app alembic upgrade head; then
    success "‚úÖ –ú–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ"
else
    log "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–π"
    log "üìã –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –º–∏–≥—Ä–∞—Ü–∏–π:"
    docker-compose -f docker-compose.prod.yml exec -T app alembic current || true
    log "üìã –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –º–∏–≥—Ä–∞—Ü–∏–π:"
    docker-compose -f docker-compose.prod.yml exec -T app alembic history || true
    rollback
fi

# –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
log "‚è≥ –û–∂–∏–¥–∞–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –Ω–æ–≤–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
WAIT_TIME=60
for i in $(seq 1 $WAIT_TIME); do
    if docker-compose -f docker-compose.prod.yml ps app | grep -q "Up"; then
        log "üì¶ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º health..."
        break
    fi
    
    if [ $i -eq $WAIT_TIME ]; then
        log "‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –∑–∞–ø—É—Å—Ç–∏–ª—Å—è –∑–∞ $WAIT_TIME —Å–µ–∫—É–Ω–¥"
        rollback
    fi
    
    sleep 1
done

# –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint
log "üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º health endpoint..."
HEALTH_WAIT=30
for i in $(seq 1 $HEALTH_WAIT); do
    if curl -f http://localhost:8000/health > /dev/null 2>&1; then
        success "‚úÖ Health check –ø—Ä–æ—à–µ–ª"
        break
    fi
    
    if [ $i -eq $HEALTH_WAIT ]; then
        log "‚ùå Health check –Ω–µ –ø—Ä–æ—à–µ–ª –∑–∞ $HEALTH_WAIT —Å–µ–∫—É–Ω–¥"
        log "üìã –õ–æ–≥–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞:"
        docker-compose -f docker-compose.prod.yml logs --tail=20 app
        rollback
    fi
    
    sleep 1
done

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
log "üß™ –í—ã–ø–æ–ª–Ω—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
if ! docker-compose -f docker-compose.prod.yml exec postgres psql -U postgres -d catalog_db -c "SELECT 1;" > /dev/null 2>&1; then
    error "‚ùå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –ë–î –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
    rollback
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—Ç—É Telegram –±–æ—Ç–∞ (–µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω webhook endpoint)
if curl -f http://localhost:8000/webhook > /dev/null 2>&1; then
    success "‚úÖ Webhook endpoint –¥–æ—Å—Ç—É–ø–µ–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
if docker-compose -f docker-compose.prod.yml logs --since=30s app | grep -i "CRITICAL\|FATAL\|ERROR" | grep -v "Health check"; then
    warning "‚ö†Ô∏è  –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –ª–æ–≥–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ—Ç–∞–ª–∏:"
    docker-compose -f docker-compose.prod.yml logs --tail=10 app
fi

success "‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã"

# –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±—Ä–∞–∑—ã
log "üßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ Docker –æ–±—Ä–∞–∑—ã..."
if [ "$REBUILD_NEEDED" = true ]; then
    # –£–¥–∞–ª—è–µ–º dangling –æ–±—Ä–∞–∑—ã (–±–µ–∑ —Ç–µ–≥–æ–≤)
    docker image prune -f > /dev/null 2>&1 || true
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≤–µ—Ä—Å–∏–∏ –æ–±—Ä–∞–∑–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3)
    docker images --format "table {{.ID}} {{.CreatedAt}}" | \
        grep -v "CREATED" | \
        sort -k2 -r | \
        tail -n +4 | \
        awk '{print $1}' | \
        xargs -r docker rmi > /dev/null 2>&1 || true
fi

# –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
log "üìú –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è..."
if [ -d "scripts" ]; then
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    mkdir -p $SCRIPTS_DIR
    
    cp scripts/*.sh $SCRIPTS_DIR/
    chmod +x $SCRIPTS_DIR/*.sh
    success "‚úÖ –°–∫—Ä–∏–ø—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã"
fi

# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
log "üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤..."
docker-compose -f docker-compose.prod.yml ps

success "üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!"

echo
echo "=== –†–ï–ó–£–õ–¨–¢–ê–¢ –û–ë–ù–û–í–õ–ï–ù–ò–Ø ==="
echo "üìù –ü—Ä–µ–¥—ã–¥—É—â–∞—è –≤–µ—Ä—Å–∏—è: $(git rev-parse --short $CURRENT_COMMIT)"
echo "üìù –ù–æ–≤–∞—è –≤–µ—Ä—Å–∏—è: $(git rev-parse --short $NEW_COMMIT)"
echo "üèóÔ∏è –û–±—Ä–∞–∑ –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω: $([ "$REBUILD_NEEDED" = true ] && echo "–î–∞" || echo "–ù–µ—Ç")"
echo "‚è±Ô∏è  –í—Ä–µ–º—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: $(date)"
echo
echo "=== –ò–ó–ú–ï–ù–ï–ù–ò–Ø ==="
git log --oneline $CURRENT_COMMIT..$NEW_COMMIT | head -10
echo
echo "=== –ü–û–õ–ï–ó–ù–´–ï –ö–û–ú–ê–ù–î–´ ==="
echo "–ü—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤: docker-compose -f $APP_DIR/docker-compose.prod.yml logs -f app"
echo "–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤: docker-compose -f $APP_DIR/docker-compose.prod.yml ps"
echo "Health check: curl http://localhost:8000/health"
echo
warning "üìù –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"
