#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤—ã—Ö –∞–¥–º–∏–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã.
"""
import asyncio
import sys
import os
from pathlib import Path
import bcrypt

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from sqlalchemy import select
from src.infrastructure.database.connection import get_session
from src.infrastructure.database.models import AdminUser as AdminUserModel
from src.infrastructure.logging.hybrid_logger import hybrid_logger


async def create_initial_admin_users():
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä–≤—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —Å –∫–ª–∞—Å—Å–∏—á–µ—Å–∫–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π.
    """
    async for session in get_session():
        try:
            created_count = 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∞–¥–º–∏–Ω—ã
            result = await session.execute(select(AdminUserModel))
            existing_admin = result.scalar_one_or_none()
            
            if existing_admin:
                print(f"‚úì –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {existing_admin.username}")
                return True
            
            # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            username = "admin"
            password = "admin123"
            email = "admin@example.com"
            
            # –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
            password_hash = bcrypt.hashpw(password.encode('utf-8'), bcrypt.gensalt()).decode('utf-8')
            
            admin_user = AdminUserModel(
                username=username,
                email=email,
                password_hash=password_hash,
                role="ADMIN",
                is_active=True,
                first_name="–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
                last_name="–°–∏—Å—Ç–µ–º—ã"
            )
            
            session.add(admin_user)
            await session.commit()
            created_count += 1
            
            print(f"‚úì –°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {username}")
            print(f"  –õ–æ–≥–∏–Ω: {username}")
            print(f"  –ü–∞—Ä–æ–ª—å: {password}")
            print(f"  Email: {email}")
            
            if created_count > 0:
                print(f"\nüéâ –°–æ–∑–¥–∞–Ω–æ {created_count} –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                await hybrid_logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∞–¥–º–∏–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")
            
            return True
            
        except Exception as e:
            await session.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            await hybrid_logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return False


async def list_admin_users():
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    async for session in get_session():
        try:
            stmt = select(AdminUserModel).order_by(AdminUserModel.created_at)
            result = await session.execute(stmt)
            users = result.scalars().all()
            
            if not users:
                print("üì≠ –ù–µ—Ç –∞–¥–º–∏–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return
            
            print(f"\nüë• –ê–¥–º–∏–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(users)}):")
            print("-" * 60)
            
            for user in users:
                status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if user.is_active else "üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
                role_icon = "üëë" if user.role == "ADMIN" else "üë§"
                
                print(f"{role_icon} {user.username} | {user.role} | {status}")
                print(f"   Email: {user.email}")
                if user.first_name or user.last_name:
                    name = f"{user.first_name or ''} {user.last_name or ''}".strip()
                    print(f"   –ò–º—è: {name}")
                print(f"   –°–æ–∑–¥–∞–Ω: {user.created_at.strftime('%d.%m.%Y %H:%M')}")
                print()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) > 1 and sys.argv[1] == "list":
        await list_admin_users()
    else:
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        success = await create_initial_admin_users()
        
        if success:
            print("\nüìã –¢–µ–∫—É—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
            await list_admin_users()
            
            print("\nüí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:")
            print("1. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –ø–æ –∞–¥—Ä–µ—Å—É: /admin/")
            print("2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ª–æ–≥–∏–Ω 'admin' –∏ –ø–∞—Ä–æ–ª—å 'admin123'")
            print("3. ‚ö†Ô∏è  –í–ê–ñ–ù–û: –°–º–µ–Ω–∏—Ç–µ –ø–∞—Ä–æ–ª—å –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –≤—Ö–æ–¥–∞!")
        else:
            print("\n‚ùå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
            sys.exit(1)


if __name__ == "__main__":
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
    try:
        from dotenv import load_dotenv
        load_dotenv()
    except ImportError:
        pass
    
    asyncio.run(main())


