#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–≤—ã—Ö –∞–¥–º–∏–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã.
"""
import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select

from src.infrastructure.database.connection import get_async_session
from src.infrastructure.database.models import AdminUser as AdminUserModel
from src.infrastructure.logging.hybrid_logger import hybrid_logger


async def create_initial_admin_users():
    """
    –°–æ–∑–¥–∞–µ—Ç –ø–µ—Ä–≤—ã—Ö –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
    """
    # –ü–æ–ª—É—á–∞–µ–º Telegram IDs –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    admin_ids_str = os.getenv("ADMIN_TELEGRAM_IDS", "")
    manager_ids_str = os.getenv("MANAGER_TELEGRAM_IDS", "")
    
    if not admin_ids_str and not manager_ids_str:
        print("‚ö†Ô∏è  –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ADMIN_TELEGRAM_IDS –∏ MANAGER_TELEGRAM_IDS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        print("   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:")
        print("   ADMIN_TELEGRAM_IDS=123456789,987654321")
        print("   MANAGER_TELEGRAM_IDS=111111111,222222222")
        return False
    
    admin_ids = [int(x.strip()) for x in admin_ids_str.split(",") if x.strip()] if admin_ids_str else []
    manager_ids = [int(x.strip()) for x in manager_ids_str.split(",") if x.strip()] if manager_ids_str else []
    
    async for session in get_async_session():
        try:
            created_count = 0
            
            # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
            for telegram_id in admin_ids:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ
                stmt = select(AdminUserModel).where(AdminUserModel.telegram_id == telegram_id)
                result = await session.execute(stmt)
                existing = result.scalar_one_or_none()
                
                if existing:
                    print(f"‚úì –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {telegram_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    continue
                
                admin_user = AdminUserModel(
                    telegram_id=telegram_id,
                    role="ADMIN",
                    is_active=True
                )
                session.add(admin_user)
                created_count += 1
                print(f"‚úì –°–æ–∑–¥–∞–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä: {telegram_id}")
            
            # –°–æ–∑–¥–∞–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            for telegram_id in manager_ids:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ
                stmt = select(AdminUserModel).where(AdminUserModel.telegram_id == telegram_id)
                result = await session.execute(stmt)
                existing = result.scalar_one_or_none()
                
                if existing:
                    print(f"‚úì –ú–µ–Ω–µ–¥–∂–µ—Ä {telegram_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                    continue
                
                manager_user = AdminUserModel(
                    telegram_id=telegram_id,
                    role="MANAGER",
                    is_active=True
                )
                session.add(manager_user)
                created_count += 1
                print(f"‚úì –°–æ–∑–¥–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä: {telegram_id}")
            
            if created_count > 0:
                await session.commit()
                print(f"\nüéâ –°–æ–∑–¥–∞–Ω–æ {created_count} –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                await hybrid_logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã –∞–¥–º–∏–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: {created_count} –Ω–æ–≤—ã—Ö")
            else:
                print("\n‚úì –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
            
            return True
            
        except Exception as e:
            await session.rollback()
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            await hybrid_logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–¥–º–∏–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            return False


async def list_admin_users():
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.
    """
    async for session in get_async_session():
        try:
            stmt = select(AdminUserModel).order_by(AdminUserModel.created_at)
            result = await session.execute(stmt)
            users = result.scalars().all()
            
            if not users:
                print("üì≠ –ù–µ—Ç –∞–¥–º–∏–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return
            
            print(f"\nüë• –ê–¥–º–∏–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(users)}):")
            print("-" * 60)
            
            for user in users:
                status = "üü¢ –ê–∫—Ç–∏–≤–µ–Ω" if user.is_active else "üî¥ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
                role_icon = "üëë" if user.role == "ADMIN" else "üë§"
                
                print(f"{role_icon} {user.telegram_id} | {user.role} | {status}")
                if user.telegram_username:
                    print(f"   @{user.telegram_username}")
                if user.first_name or user.last_name:
                    name = f"{user.first_name or ''} {user.last_name or ''}".strip()
                    print(f"   {name}")
                if user.last_login:
                    print(f"   –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤—Ö–æ–¥: {user.last_login.strftime('%d.%m.%Y %H:%M')}")
                print()
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞: {e}")


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) > 1 and sys.argv[1] == "list":
        await list_admin_users()
    else:
        print("üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω-–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        success = await create_initial_admin_users()
        
        if success:
            print("\nüìã –¢–µ–∫—É—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:")
            await list_admin_users()
            
            print("\nüí° –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:")
            print("1. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –ø–æ –∞–¥—Ä–µ—Å—É: /admin/")
            print("2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ Telegram –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            print("3. –¢–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–Ω—ã–µ Telegram ID –±—É–¥—É—Ç –∏–º–µ—Ç—å –¥–æ—Å—Ç—É–ø")
        else:
            print("\n‚ùå –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å")
            sys.exit(1)


if __name__ == "__main__":
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
    try:
        from dotenv import load_dotenv
        load_dotenv()
    except ImportError:
        pass
    
    asyncio.run(main())


