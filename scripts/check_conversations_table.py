#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã conversations
"""
import asyncio
import os
from sqlalchemy.ext.asyncio import create_async_engine
from sqlalchemy import text

async def check_conversations_table():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã conversations"""
    
    # –ü–æ–ª—É—á–∞–µ–º URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    database_url = os.getenv('DATABASE_URL')
    if not database_url:
        print("‚ùå DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return
    
    print(f"üîç –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    
    try:
        engine = create_async_engine(database_url)
        
        async with engine.begin() as conn:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Ç–∞–±–ª–∏—Ü–∞ conversations
            result = await conn.execute(text("""
                SELECT EXISTS (
                    SELECT FROM information_schema.tables 
                    WHERE table_schema = 'public' 
                    AND table_name = 'conversations'
                );
            """))
            table_exists = result.scalar()
            
            if not table_exists:
                print("‚ùå –¢–∞–±–ª–∏—Ü–∞ 'conversations' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return
            
            print("‚úÖ –¢–∞–±–ª–∏—Ü–∞ 'conversations' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
            result = await conn.execute(text("""
                SELECT column_name, data_type, is_nullable, column_default
                FROM information_schema.columns 
                WHERE table_name = 'conversations' 
                ORDER BY ordinal_position;
            """))
            
            columns = result.fetchall()
            
            print("\nüìã –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã 'conversations':")
            for col in columns:
                print(f"  - {col[0]} ({col[1]}) {'NULL' if col[2] == 'YES' else 'NOT NULL'}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ started_at –∏–ª–∏ created_at
            column_names = [col[0] for col in columns]
            
            if 'started_at' in column_names:
                print("\n‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –í —Ç–∞–±–ª–∏—Ü–µ –µ—Å—Ç—å –ø–æ–ª–µ 'started_at', –Ω–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å 'created_at'")
                print("   –ù—É–∂–Ω–æ –ø—Ä–∏–º–µ–Ω–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é 008_rename_started_at_to_created_at")
            elif 'created_at' in column_names:
                print("\n‚úÖ –ü–æ–ª–µ 'created_at' –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É–µ—Ç - —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞")
            else:
                print("\n‚ùå –ù–∏ 'started_at', –Ω–∏ 'created_at' –Ω–µ –Ω–∞–π–¥–µ–Ω—ã!")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await engine.dispose()

if __name__ == "__main__":
    asyncio.run(check_conversations_table())
