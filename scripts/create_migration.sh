#!/bin/bash
# –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –º–∏–≥—Ä–∞—Ü–∏–π —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./scripts/create_migration.sh "–û–ø–∏—Å–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏"

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')]${NC} $1"
}

error() {
    echo -e "${RED}[ERROR]${NC} $1"
    exit 1
}

success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã
if [ $# -eq 0 ]; then
    error "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 \"–û–ø–∏—Å–∞–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏\""
fi

MIGRATION_DESCRIPTION="$1"

log "üîß –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é: $MIGRATION_DESCRIPTION"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
if [ ! -f "alembic.ini" ]; then
    error "–§–∞–π–ª alembic.ini –Ω–µ –Ω–∞–π–¥–µ–Ω! –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω—è –ø—Ä–æ–µ–∫—Ç–∞."
fi

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–∏
log "üîç –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–∏..."
MIGRATIONS_DIR="src/infrastructure/database/migrations/versions"
LAST_MIGRATION=$(ls "$MIGRATIONS_DIR"/*.py 2>/dev/null | sort -V | tail -1 | sed 's/.*\///; s/\.py$//' | grep -o '^[0-9]*' || echo "0")
NEXT_NUMBER=$((LAST_MIGRATION + 1))
NEXT_NUMBER_PADDED=$(printf "%03d" $NEXT_NUMBER)

log "üìù –°–ª–µ–¥—É—é—â–∏–π –Ω–æ–º–µ—Ä –º–∏–≥—Ä–∞—Ü–∏–∏: $NEXT_NUMBER_PADDED"

# –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
MIGRATION_NAME="${NEXT_NUMBER_PADDED}_$(echo "$MIGRATION_DESCRIPTION" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/_/g' | sed 's/__*/_/g' | sed 's/^_\|_$//g')"
MIGRATION_FILE="$MIGRATIONS_DIR/${MIGRATION_NAME}.py"

log "üìÑ –ò–º—è —Ñ–∞–π–ª–∞ –º–∏–≥—Ä–∞—Ü–∏–∏: $MIGRATION_NAME.py"

# –°–æ–∑–¥–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
log "üèóÔ∏è –°–æ–∑–¥–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é..."
docker-compose -f docker-compose.prod.yml exec app alembic revision --autogenerate -m "$MIGRATION_DESCRIPTION"

# –ù–∞—Ö–æ–¥–∏–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª (–æ–Ω –±—É–¥–µ—Ç —Å —Ö–µ—à–µ–º)
CREATED_FILE=$(find "$MIGRATIONS_DIR" -name "*$(echo "$MIGRATION_DESCRIPTION" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/_/g')*.py" | head -1)

if [ -z "$CREATED_FILE" ]; then
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é, –±–µ—Ä–µ–º —Å–∞–º—ã–π –Ω–æ–≤—ã–π —Ñ–∞–π–ª
    CREATED_FILE=$(ls -t "$MIGRATIONS_DIR"/*.py | head -1)
fi

if [ -z "$CREATED_FILE" ]; then
    error "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏"
fi

log "üìù –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: $(basename "$CREATED_FILE")"

# –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ñ–∞–π–ª –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
mv "$CREATED_FILE" "$MIGRATION_FILE"
log "üîÑ –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –≤: $(basename "$MIGRATION_FILE")"

# –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
log "üîß –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–∏–≥—Ä–∞—Ü–∏–∏..."

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π down_revision (–ø–æ—Å–ª–µ–¥–Ω—é—é –º–∏–≥—Ä–∞—Ü–∏—é)
LAST_REVISION=$(ls "$MIGRATIONS_DIR"/*.py | grep -v "$MIGRATION_NAME" | sort -V | tail -1 | sed 's/.*\///; s/\.py$//')

# –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
sed -i "s/revision = .*/revision = \"$MIGRATION_NAME\"/" "$MIGRATION_FILE"
sed -i "s/down_revision = .*/down_revision = \"$LAST_REVISION\"/" "$MIGRATION_FILE"

success "‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞: $MIGRATION_NAME.py"

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
log "üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏:"
head -20 "$MIGRATION_FILE"

echo
echo "=== –†–ï–ó–£–õ–¨–¢–ê–¢ ==="
echo "üìù –°–æ–∑–¥–∞–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è: $MIGRATION_NAME.py"
echo "üîó –°–≤—è–∑—å: $LAST_REVISION -> $MIGRATION_NAME"
echo
echo "=== –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò ==="
echo "1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–∏–≥—Ä–∞—Ü–∏–∏: $MIGRATION_FILE"
echo "2. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –ª–æ–≥–∏–∫—É –º–∏–≥—Ä–∞—Ü–∏–∏"
echo "3. –ü—Ä–∏–º–µ–Ω–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é: docker-compose -f docker-compose.prod.yml exec app alembic upgrade head"
echo "4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç: docker-compose -f docker-compose.prod.yml exec app alembic current"
