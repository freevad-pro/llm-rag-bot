"""
Smoke tests –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–∏—Å—Ç–µ–º—ã –Ω–∞ VPS.
–ë—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤ —Å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–æ–π –¥–∞–Ω–Ω—ã—Ö.
"""
import asyncio
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Any, Optional
from contextlib import asynccontextmanager

from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, delete, text
from sqlalchemy.exc import SQLAlchemyError

from src.config.database import get_async_session
from src.infrastructure.database.models import User, Conversation, Message, Lead as LeadModel
from src.infrastructure.llm.factory import create_llm_provider
from src.infrastructure.search.catalog_service import CatalogService
from src.application.telegram.services.user_service import ensure_user_exists
from src.application.telegram.services.message_service import get_or_create_conversation, save_message
from src.infrastructure.logging.hybrid_logger import hybrid_logger


class SmokeTestError(Exception):
    """–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –¥–ª—è –æ—à–∏–±–æ–∫ smoke —Ç–µ—Å—Ç–æ–≤"""
    pass


class SmokeTestRunner:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±—ã—Å—Ç—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –Ω–∞ VPS"""
    
    # –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    TEST_USER_PREFIX = "smoke_test_"
    TEST_CHAT_ID_BASE = 999000000  # –í–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ä–µ–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    TEST_CONVERSATION_PREFIX = "smoke_test_conversation_"
    
    def __init__(self):
        self.logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")
        self.test_data_created = []  # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
        
    async def run_all_smoke_tests(self) -> Dict[str, Any]:
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ smoke tests –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
        
        Returns:
            Dict —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤
        """
        results = {
            "timestamp": datetime.utcnow().isoformat(),
            "total_tests": 0,
            "passed": 0,
            "failed": 0,
            "tests": {}
        }
        
        tests = [
            ("database", self.test_database_connection),
            ("llm_provider", self.test_llm_provider),
            ("catalog_search", self.test_catalog_search), 
            ("user_creation", self.test_user_creation),
            ("api_health", self.test_api_health)
        ]
        
        self.logger.info("üî• –ó–∞–ø—É—Å–∫ smoke tests...")
        
        for test_name, test_func in tests:
            results["total_tests"] += 1
            
            try:
                start_time = datetime.utcnow()
                await test_func()
                end_time = datetime.utcnow()
                
                duration = (end_time - start_time).total_seconds()
                
                results["tests"][test_name] = {
                    "status": "PASSED",
                    "duration_seconds": duration,
                    "error": None
                }
                results["passed"] += 1
                
                self.logger.info(f"‚úÖ {test_name}: PASSED ({duration:.2f}s)")
                
            except Exception as e:
                end_time = datetime.utcnow()
                duration = (end_time - start_time).total_seconds()
                
                results["tests"][test_name] = {
                    "status": "FAILED", 
                    "duration_seconds": duration,
                    "error": str(e)
                }
                results["failed"] += 1
                
                self.logger.error(f"‚ùå {test_name}: FAILED - {e}")
        
        # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö
        await self.cleanup_all_test_data()
        
        success_rate = (results["passed"] / results["total_tests"]) * 100
        self.logger.info(f"üèÅ Smoke tests –∑–∞–≤–µ—Ä—à–µ–Ω—ã: {results['passed']}/{results['total_tests']} ({success_rate:.1f}%)")
        
        return results
    
    async def test_database_connection(self):
        """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        async with get_async_session() as session:
            # –ü—Ä–æ—Å—Ç–æ–π SELECT –∑–∞–ø—Ä–æ—Å
            result = await session.execute(text("SELECT 1 as test_value"))
            value = result.scalar()
            
            if value != 1:
                raise SmokeTestError(f"Database returned {value}, expected 1")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–ø–∏—Å–∏/—á—Ç–µ–Ω–∏—è
            test_user = User(
                chat_id=self.TEST_CHAT_ID_BASE + 1,
                telegram_user_id=self.TEST_CHAT_ID_BASE + 1,
                username=f"{self.TEST_USER_PREFIX}db_test",
                first_name="Test",
                last_name="User"
            )
            
            session.add(test_user)
            await session.flush()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ ID –ø—Ä–∏—Å–≤–æ–µ–Ω
            if not test_user.id:
                raise SmokeTestError("User ID not assigned after flush")
            
            self.test_data_created.append(('user', test_user.id))
            
            # –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é (–¥–∞–Ω–Ω—ã–µ –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è)
            await session.rollback()
    
    async def test_llm_provider(self):
        """–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞"""
        try:
            llm_provider = await create_llm_provider()
            
            # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            test_prompt = "–°–∫–∞–∂–∏ –æ–¥–Ω–æ —Å–ª–æ–≤–æ: –ø—Ä–∏–≤–µ—Ç"
            response = await llm_provider.generate_response(
                messages=[{"role": "user", "content": test_prompt}],
                max_tokens=10
            )
            
            if not response or len(response.strip()) == 0:
                raise SmokeTestError("LLM returned empty response")
            
            if len(response) > 100:
                raise SmokeTestError(f"LLM response too long: {len(response)} chars")
                
        except Exception as e:
            raise SmokeTestError(f"LLM provider failed: {e}")
    
    async def test_catalog_search(self):
        """–¢–µ—Å—Ç –ø–æ–∏—Å–∫–∞ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É"""
        try:
            catalog_service = CatalogService()
            
            # –ü–æ–∏—Å–∫ –ø–æ –ø–æ–ø—É–ª—è—Ä–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É
            results = await catalog_service.search("–Ω–∞—Å–æ—Å", limit=5)
            
            if not results:
                raise SmokeTestError("Catalog search returned no results")
                
            if len(results) == 0:
                raise SmokeTestError("Empty search results")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            first_result = results[0]
            required_fields = ['title', 'description']
            
            for field in required_fields:
                if not hasattr(first_result, field):
                    raise SmokeTestError(f"Search result missing field: {field}")
                    
        except Exception as e:
            raise SmokeTestError(f"Catalog search failed: {e}")
    
    async def test_user_creation(self):
        """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å"""
        async with get_async_session() as session:
            try:
                test_chat_id = self.TEST_CHAT_ID_BASE + 2
                test_telegram_id = self.TEST_CHAT_ID_BASE + 2
                
                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Å–µ—Ä–≤–∏—Å
                user = await ensure_user_exists(
                    session=session,
                    chat_id=test_chat_id,
                    telegram_user_id=test_telegram_id,
                    username=f"{self.TEST_USER_PREFIX}service_test",
                    first_name="Smoke",
                    last_name="Test"
                )
                
                if not user or not user.id:
                    raise SmokeTestError("User creation failed")
                
                self.test_data_created.append(('user', user.id))
                
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –¥–∏–∞–ª–æ–≥
                conversation = await get_or_create_conversation(
                    session=session,
                    chat_id=test_chat_id
                )
                
                if not conversation or not conversation.id:
                    raise SmokeTestError("Conversation creation failed")
                
                self.test_data_created.append(('conversation', conversation.id))
                
                # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                message = await save_message(
                    session=session,
                    chat_id=test_chat_id,
                    role="user",
                    content="–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ smoke test"
                )
                
                if not message or not message.id:
                    raise SmokeTestError("Message creation failed")
                
                self.test_data_created.append(('message', message.id))
                
                await session.commit()
                
            except Exception as e:
                await session.rollback()
                raise SmokeTestError(f"User creation test failed: {e}")
    
    async def test_api_health(self):
        """–¢–µ—Å—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API endpoints (–±–∞–∑–æ–≤—ã–π)"""
        # –≠—Ç–æ—Ç —Ç–µ—Å—Ç –º–æ–∂–Ω–æ —Ä–∞—Å—à–∏—Ä–∏—Ç—å —Å –ø–æ–º–æ—â—å—é httpx –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
        # –ü–æ–∫–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É—é—Ç—Å—è
        try:
            from src.application.web import app  # –ï—Å–ª–∏ –µ—Å—Ç—å FastAPI app
            from src.application.telegram.bot import dp  # –ï—Å–ª–∏ –µ—Å—Ç—å Telegram dispatcher
            
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è
            if not app and not dp:
                raise SmokeTestError("API modules not loaded")
                
        except ImportError as e:
            raise SmokeTestError(f"API modules import failed: {e}")
    
    async def cleanup_all_test_data(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        async with get_async_session() as session:
            try:
                cleaned_count = 0
                
                # –£–¥–∞–ª—è–µ–º –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è (–∏–∑-–∑–∞ foreign keys)
                for data_type, data_id in reversed(self.test_data_created):
                    try:
                        if data_type == 'message':
                            await session.execute(delete(Message).where(Message.id == data_id))
                        elif data_type == 'conversation':
                            await session.execute(delete(Conversation).where(Conversation.id == data_id))
                        elif data_type == 'lead':
                            await session.execute(delete(LeadModel).where(LeadModel.id == data_id))
                        elif data_type == 'user':
                            await session.execute(delete(User).where(User.id == data_id))
                        
                        cleaned_count += 1
                        
                    except Exception as e:
                        self.logger.warning(f"Failed to cleanup {data_type} {data_id}: {e}")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏)
                await self.cleanup_test_data_by_prefix(session)
                
                await session.commit()
                
                if cleaned_count > 0:
                    self.logger.info(f"üßπ –û—á–∏—â–µ–Ω–æ {cleaned_count} —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø–∏—Å–µ–π")
                
                self.test_data_created.clear()
                
            except Exception as e:
                await session.rollback()
                self.logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
    
    async def cleanup_test_data_by_prefix(self, session: AsyncSession):
        """–û—á–∏—â–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–µ—Ñ–∏–∫—Å–∞–º (–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∑–∞—â–∏—Ç–∞)"""
        try:
            # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –∏–º–µ–Ω–∞–º–∏
            await session.execute(
                delete(User).where(User.username.like(f"{self.TEST_USER_PREFIX}%"))
            )
            
            # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∏–∞–ª–æ–≥–∏ 
            await session.execute(
                delete(Conversation).where(
                    Conversation.chat_id >= self.TEST_CHAT_ID_BASE
                )
            )
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ (> 1 —á–∞—Å–∞)
            cutoff_time = datetime.utcnow() - timedelta(hours=1)
            await session.execute(
                delete(User).where(
                    User.username.like(f"{self.TEST_USER_PREFIX}%") &
                    User.created_at < cutoff_time
                )
            )
            
        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –æ—á–∏—Å—Ç–∫–∏: {e}")


# –£–¥–æ–±–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–∫—Ä–∏–ø—Ç–∞—Ö
async def run_smoke_tests() -> Dict[str, Any]:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ smoke tests –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    runner = SmokeTestRunner()
    return await runner.run_all_smoke_tests()


async def run_single_smoke_test(test_name: str) -> Dict[str, Any]:
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –æ–¥–∏–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π smoke test"""
    runner = SmokeTestRunner()
    
    tests_map = {
        "database": runner.test_database_connection,
        "llm": runner.test_llm_provider,
        "search": runner.test_catalog_search,
        "user": runner.test_user_creation,
        "api": runner.test_api_health
    }
    
    if test_name not in tests_map:
        raise ValueError(f"Unknown test: {test_name}. Available: {list(tests_map.keys())}")
    
    start_time = datetime.utcnow()
    
    try:
        await tests_map[test_name]()
        end_time = datetime.utcnow()
        duration = (end_time - start_time).total_seconds()
        
        result = {
            "test": test_name,
            "status": "PASSED",
            "duration_seconds": duration,
            "error": None
        }
        
    except Exception as e:
        end_time = datetime.utcnow()
        duration = (end_time - start_time).total_seconds()
        
        result = {
            "test": test_name,
            "status": "FAILED",
            "duration_seconds": duration,
            "error": str(e)
        }
    
    finally:
        # –í—Å–µ–≥–¥–∞ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        await runner.cleanup_all_test_data()
    
    return result


if __name__ == "__main__":
    # –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è
    async def main():
        results = await run_smoke_tests()
        print(f"Results: {results}")
    
    asyncio.run(main())
