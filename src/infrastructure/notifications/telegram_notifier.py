"""
–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º —á–µ—Ä–µ–∑ Telegram.
–°–æ–≥–ª–∞—Å–Ω–æ @vision.md - –∞–ª–µ—Ä—Ç—ã –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç.
"""
import logging
from typing import Optional

from aiogram import Bot
from aiogram.exceptions import TelegramAPIError

from src.config.settings import settings
from src.domain.entities.lead import Lead
from src.infrastructure.logging.hybrid_logger import hybrid_logger


class TelegramNotifier:
    """–°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram"""
    
    def __init__(self, bot: Bot) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
        
        Args:
            bot: –≠–∫–∑–µ–º–ø–ª—è—Ä Telegram –±–æ—Ç–∞
        """
        self.bot = bot
        self._logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")
    
    async def notify_new_lead(self, lead: Lead, chat_id: int) -> bool:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–º –ª–∏–¥–µ.
        
        Args:
            lead: –û–±—ä–µ–∫—Ç –ª–∏–¥–∞
            chat_id: ID —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            
        Returns:
            True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        if not settings.manager_telegram_chat_id:
            await hybrid_logger.warning("MANAGER_TELEGRAM_CHAT_ID –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω - —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã")
            return False
        
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = self._format_lead_notification(lead, chat_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ –≥—Ä—É–ø–ø–æ–≤–æ–π —á–∞—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            await self.bot.send_message(
                chat_id=settings.manager_telegram_chat_id,
                text=message_text,
                parse_mode="HTML",
                disable_web_page_preview=True
            )
            
            await hybrid_logger.business(
                "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∏–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º",
                {
                    "lead_id": lead.id,
                    "manager_chat_id": settings.manager_telegram_chat_id,
                    "user_chat_id": chat_id
                }
            )
            
            return True
            
        except TelegramAPIError as e:
            await hybrid_logger.error(
                f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram: {e}",
                {
                    "lead_id": lead.id,
                    "manager_chat_id": settings.manager_telegram_chat_id,
                    "error_code": e.error_code if hasattr(e, 'error_code') else None
                }
            )
            return False
        
        except Exception as e:
            await hybrid_logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    async def notify_critical_error(self, error_message: str, context: dict = None) -> bool:
        """
        –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ.
        
        Args:
            error_message: –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
            context: –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
            
        Returns:
            True –µ—Å–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ
        """
        admin_ids = settings.admin_telegram_ids
        if not admin_ids:
            return False
        
        try:
            notification_text = f"üö® <b>–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê</b>\n\n"
            notification_text += f"üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b> {error_message}\n"
            
            if context:
                notification_text += f"\nüìä <b>–ö–æ–Ω—Ç–µ–∫—Å—Ç:</b>\n"
                for key, value in context.items():
                    notification_text += f"‚Ä¢ {key}: {value}\n"
            
            notification_text += f"\n‚è∞ –í—Ä–µ–º—è: {self._get_current_time()}"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º
            success_count = 0
            for admin_id in admin_ids:
                try:
                    await self.bot.send_message(
                        chat_id=admin_id,
                        text=notification_text,
                        parse_mode="HTML"
                    )
                    success_count += 1
                except TelegramAPIError:
                    continue
            
            return success_count > 0
            
        except Exception as e:
            self._logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            return False
    
    def _format_lead_notification(self, lead: Lead, user_chat_id: int) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ª–∏–¥–µ"""
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –ø–æ —Ç–∏–ø—É
        emoji = "ü§ñ" if lead.auto_created else "üìû"
        creation_type = "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏" if lead.auto_created else "–í—Ä—É—á–Ω—É—é"
        
        message = f"{emoji} <b>–ù–æ–≤—ã–π –ª–∏–¥ #{lead.id}</b>\n"
        message += f"üìã <b>–°–æ–∑–¥–∞–Ω:</b> {creation_type}\n\n"
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        message += f"üë§ <b>–ò–º—è:</b> {lead.get_display_name()}\n"
        
        # –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        if lead.phone:
            message += f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> <code>{lead.phone}</code>\n"
        if lead.email:
            message += f"üìß <b>Email:</b> <code>{lead.email}</code>\n"
        if lead.telegram:
            message += f"üí¨ <b>Telegram:</b> {lead.telegram}\n"
        if lead.company:
            message += f"üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {lead.company}\n"
        
        # –í–æ–ø—Ä–æ—Å/–ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å
        if lead.question:
            question_preview = lead.question[:100] + "..." if len(lead.question) > 100 else lead.question
            message += f"\n‚ùì <b>–í–æ–ø—Ä–æ—Å:</b>\n{question_preview}\n"
        
        # –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        message += f"\nüìä <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {lead.lead_source.value}\n"
        message += f"‚è∞ <b>–°–æ–∑–¥–∞–Ω:</b> {self._format_datetime_msk(lead.created_at)}"
        
        return message
    
    def _format_datetime(self, dt) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏"""
        if not dt:
            return "‚Äî"
        return dt.strftime("%d.%m.%Y %H:%M")

    def _format_datetime_msk(self, dt) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ"""
        if not dt:
            return "‚Äî"
        
        from datetime import timezone, timedelta
        
        # –ú–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è (UTC+3)
        moscow_tz = timezone(timedelta(hours=3))
        
        # –ï—Å–ª–∏ –≤—Ä–µ–º—è –≤ UTC, –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–æ—Å–∫–æ–≤—Å–∫–æ–µ
        if dt.tzinfo is None:
            # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ –≤—Ä–µ–º—è –≤ UTC
            dt = dt.replace(tzinfo=timezone.utc)
        
        moscow_time = dt.astimezone(moscow_tz)
        return moscow_time.strftime("%d.%m.%Y %H:%M –ú–°–ö")
    
    def _get_current_time(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
        from datetime import datetime
        return datetime.now().strftime("%d.%m.%Y %H:%M:%S")


# Singleton instance –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ handlers
_notifier_instance: Optional[TelegramNotifier] = None


def get_telegram_notifier(bot: Bot) -> TelegramNotifier:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ singleton instance —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    global _notifier_instance
    if _notifier_instance is None:
        _notifier_instance = TelegramNotifier(bot)
    return _notifier_instance
