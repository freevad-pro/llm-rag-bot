"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è Telegram –±–æ—Ç–∞.
–†–µ–∞–ª–∏–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—ã –∏ callback'–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º.
"""

import logging
from typing import Optional

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy.ext.asyncio import AsyncSession

from ....infrastructure.search.catalog_service import CatalogSearchService
from ..keyboards.search_keyboards import SearchKeyboardBuilder, get_main_search_keyboard, get_contact_manager_keyboard
from ..services import message_service

logger = logging.getLogger(__name__)

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞
class SearchStates(StatesGroup):
    waiting_for_search_query = State()
    waiting_for_article_search = State()


class SearchHandlers:
    """
    –ö–ª–∞—Å—Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤.
    """
    
    def __init__(
        self, 
        catalog_service: CatalogSearchService
    ) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ø–æ–∏—Å–∫–∞.
        
        Args:
            catalog_service: –°–µ—Ä–≤–∏—Å –ø–æ–∏—Å–∫–∞ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É
        """
        self.catalog_service = catalog_service
        self.router = Router()
        self._logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers
        self._register_handlers()
    
    async def save_user_message(self, session: AsyncSession, user_id: int, chat_id: int, content: str) -> None:
        """–û–±—ë—Ä—Ç–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        await message_service.save_message(session, chat_id, "user", content)
    
    async def save_assistant_message(self, session: AsyncSession, user_id: int, chat_id: int, content: str) -> None:
        """–û–±—ë—Ä—Ç–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞"""
        await message_service.save_message(session, chat_id, "assistant", content)
    
    def _register_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ–∏—Å–∫–∞."""
        
        # –ö–æ–º–∞–Ω–¥—ã
        self.router.message(Command("search"))(self.cmd_search)
        self.router.message(Command("categories"))(self.cmd_categories)
        
        # Callback'–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
        self.router.callback_query(F.data == "new_search")(self.callback_new_search)
        self.router.callback_query(F.data == "search_by_name")(self.callback_search_by_name)
        self.router.callback_query(F.data == "search_by_categories")(self.callback_search_by_categories)
        self.router.callback_query(F.data == "search_by_article")(self.callback_search_by_article)
        self.router.callback_query(F.data == "search_all_categories")(self.callback_search_all_categories)
        
        # Callback'–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        self.router.callback_query(F.data.startswith("search_category:"))(self.callback_search_category)
        self.router.callback_query(F.data.startswith("categories_page:"))(self.callback_categories_page)
        
        # Callback'–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞
        self.router.callback_query(F.data.startswith("search_results_page:"))(self.callback_search_results_page)
        self.router.callback_query(F.data.startswith("product_details:"))(self.callback_product_details)
        self.router.callback_query(F.data.startswith("product_photo:"))(self.callback_product_photo)
        self.router.callback_query(F.data.startswith("product_page:"))(self.callback_product_page)
        
        # Callback'–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å —Ç–æ–≤–∞—Ä–∞–º–∏
        self.router.callback_query(F.data.startswith("order_product:"))(self.callback_order_product)
        self.router.callback_query(F.data.startswith("ask_about_product:"))(self.callback_ask_about_product)
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–∏—Å–∫–∞
        self.router.message(SearchStates.waiting_for_search_query)(self.handle_search_query)
        self.router.message(SearchStates.waiting_for_article_search)(self.handle_article_search)
    
    async def cmd_search(self, message: Message, state: FSMContext, session: AsyncSession) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /search.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        """
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏–∏
            await self.save_user_message(
                session,
                message.from_user.id, 
                message.chat.id,
                message.text or ""
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –∫–∞—Ç–∞–ª–æ–≥–∞
            if not await self.catalog_service.is_indexed():
                await message.answer(
                    "üîß –ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω. "
                    "–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –∫–∞—Ç–∞–ª–æ–≥–∞.",
                    reply_markup=get_contact_manager_keyboard()
                )
                return
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –ø–æ–∏—Å–∫–∞
            response_text = (
                "üîç <b>–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:"
            )
            
            await message.answer(
                response_text,
                reply_markup=get_main_search_keyboard(),
                parse_mode="HTML"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞
            await self.save_assistant_message(
                session,
                message.from_user.id,
                message.chat.id, 
                response_text
            )
            
        except Exception as e:
            self._logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /search: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
    
    async def cmd_categories(self, message: Message, state: FSMContext, session: AsyncSession) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /categories.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        """
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await self.save_user_message(
                session,
                message.from_user.id,
                message.chat.id,
                message.text or ""
            )
            
            await self._show_categories(message.from_user.id, message.chat.id)
            
        except Exception as e:
            self._logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ /categories: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π.")
    
    async def callback_new_search(self, callback: CallbackQuery, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback'–∞ –Ω–æ–≤–æ–≥–æ –ø–æ–∏—Å–∫–∞."""
        await callback.answer()
        await state.clear()
        
        response_text = (
            "üîç <b>–ù–æ–≤—ã–π –ø–æ–∏—Å–∫</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –ø–æ–∏—Å–∫–∞:"
        )
        
        await callback.message.edit_text(
            response_text,
            reply_markup=get_main_search_keyboard(),
            parse_mode="HTML"
        )
    
    async def callback_search_by_name(self, callback: CallbackQuery, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é."""
        await callback.answer()
        
        await state.set_state(SearchStates.waiting_for_search_query)
        
        response_text = (
            "üîç <b>–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏–ª–∏ –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏–µ:"
        )
        
        await callback.message.edit_text(response_text, parse_mode="HTML")
    
    async def callback_search_by_categories(self, callback: CallbackQuery, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º."""
        await callback.answer()
        await state.clear()
        
        await self._show_categories(callback.from_user.id, callback.message.chat.id, callback.message)
    
    async def callback_search_by_article(self, callback: CallbackQuery, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É."""
        await callback.answer()
        
        await state.set_state(SearchStates.waiting_for_article_search)
        
        response_text = (
            "üÜî <b>–ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É</b>\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞:"
        )
        
        await callback.message.edit_text(response_text, parse_mode="HTML")

    async def callback_search_all_categories(self, callback: CallbackQuery, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º."""
        await callback.answer()
        
        await callback.message.edit_text(
            "üìÇ <b>–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:",
            parse_mode="HTML",
            reply_markup=SearchKeyboardBuilder.back_to_search_menu()
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await self._show_categories(
            user_id=callback.from_user.id,
            chat_id=callback.message.chat.id,
            message=callback.message,
            page=0
        )
    
    async def callback_search_category(self, callback: CallbackQuery, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏."""
        await callback.answer()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ callback_data
        category = callback.data.split(":", 1)[1]
        
        await state.set_state(SearchStates.waiting_for_search_query)
        await state.update_data(category=category)
        
        response_text = (
            f"üîç <b>–ü–æ–∏—Å–∫ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:</b> {category}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:"
        )
        
        await callback.message.edit_text(response_text, parse_mode="HTML")
    
    async def callback_categories_page(self, callback: CallbackQuery, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π."""
        await callback.answer()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        page = int(callback.data.split(":")[1])
        
        await self._show_categories(
            callback.from_user.id, 
            callback.message.chat.id, 
            callback.message,
            page
        )
    
    async def handle_search_query(self, message: Message, state: FSMContext, session: AsyncSession) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∑–∞–ø—Ä–æ—Å–æ–º
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        """
        try:
            query = message.text.strip()
            
            if not query:
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å.")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.save_user_message(
                session,
                message.from_user.id,
                message.chat.id,
                query
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            state_data = await state.get_data()
            category = state_data.get("category")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            await self._perform_search(
                user_id=message.from_user.id,
                chat_id=message.chat.id,
                query=query,
                category=category,
                message=message
            )
            
            await state.clear()
            
        except Exception as e:
            self._logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def handle_article_search(self, message: Message, state: FSMContext, session: AsyncSession) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –∞—Ä—Ç–∏–∫—É–ª–æ–º
            state: –°–æ—Å—Ç–æ—è–Ω–∏–µ FSM
        """
        try:
            article = message.text.strip()
            
            if not article:
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∞—Ä—Ç–∏–∫—É–ª —Ç–æ–≤–∞—Ä–∞.")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await self.save_user_message(
                session,
                message.from_user.id,
                message.chat.id,
                article
            )
            
            # –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å)
            await self._perform_search(
                user_id=message.from_user.id,
                chat_id=message.chat.id,
                query=f"–∞—Ä—Ç–∏–∫—É–ª {article}",
                category=None,
                message=message
            )
            
            await state.clear()
            
        except Exception as e:
            self._logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."        )

    async def callback_search_results_page(self, callback: CallbackQuery, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞."""
        await callback.answer()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
        try:
            page = int(callback.data.split(":", 1)[1])
        except (ValueError, IndexError):
            page = 0
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ª–µ–¥—É—é—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        # –ü–æ–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        await callback.message.edit_text(
            f"üìÑ <b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {page + 1}</b>\n\n"
            "–ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞ –±—É–¥–µ—Ç —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∏—Ç–µ—Ä–∞—Ü–∏—è—Ö.",
            parse_mode="HTML",
            reply_markup=SearchKeyboardBuilder.back_to_search_menu()
        )
    
    async def callback_product_details(self, callback: CallbackQuery, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ –¥–µ—Ç–∞–ª–µ–π —Ç–æ–≤–∞—Ä–∞."""
        await callback.answer()
        
        # –ò–∑–≤–ª–µ–∫–∞–µ–º ID —Ç–æ–≤–∞—Ä–∞
        product_id = callback.data.split(":", 1)[1]
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ
        # –ü–æ–∫–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
        await callback.message.edit_text(
            f"üì¶ <b>–¢–æ–≤–∞—Ä ID: {product_id}</b>\n\n"
            "–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∏—Ç–µ—Ä–∞—Ü–∏—è—Ö.",
            parse_mode="HTML",
            reply_markup=SearchKeyboardBuilder.build_product_details_keyboard(
                product_id=product_id,
                has_photo=False,
                has_page_url=False
            )
        )
    
    async def callback_order_product(self, callback: CallbackQuery, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫–∞–∑–∞ —Ç–æ–≤–∞—Ä–∞."""
        await callback.answer("üìã –ü–µ—Ä–µ—Ö–æ–¥ –∫ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞...")
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞
        await callback.message.answer(
            "üíº <b>–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞</b>\n\n"
            "–î–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.",
            parse_mode="HTML",
            reply_markup=get_contact_manager_keyboard()
        )
    
    async def _show_categories(
        self, 
        user_id: int, 
        chat_id: int, 
        message: Optional[Message] = None,
        page: int = 0
    ) -> None:
        """
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            chat_id: ID —á–∞—Ç–∞
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
            page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            categories = await self.catalog_service.get_categories()
            
            if not categories:
                response_text = (
                    "üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
                    "‚ùå –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ö–∞—Ç–∞–ª–æ–≥ –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω."
                )
                keyboard = get_contact_manager_keyboard()
            else:
                response_text = (
                    f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤</b>\n\n"
                    f"–ù–∞–π–¥–µ–Ω–æ {len(categories)} –∫–∞—Ç–µ–≥–æ—Ä–∏–π:"
                )
                keyboard = SearchKeyboardBuilder.build_categories_keyboard(categories, page)
            
            if message:
                # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await message.edit_text(
                    response_text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
            else:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                from aiogram import Bot
                bot = Bot.get_current()
                sent_message = await bot.send_message(
                    chat_id=chat_id,
                    text=response_text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ (—Ç—Ä–µ–±—É–µ—Ç—Å—è session)
                # await self.save_assistant_message(session, user_id, chat_id, response_text)
            
        except Exception as e:
            self._logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {e}")
            error_text = "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π."
            
            if message:
                await message.edit_text(error_text)
            else:
                from aiogram import Bot
                bot = Bot.get_current()
                await bot.send_message(chat_id=chat_id, text=error_text)
    
    async def _perform_search(
        self,
        user_id: int,
        chat_id: int, 
        query: str,
        category: Optional[str] = None,
        message: Optional[Message] = None
    ) -> None:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
        
        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            chat_id: ID —á–∞—Ç–∞
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            if message:
                loading_msg = await message.answer("üîç –ò—â—É —Ç–æ–≤–∞—Ä—ã...")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            search_results = await self.catalog_service.search_products(
                query=query,
                category=category,
                k=20  # –ü–æ–ª—É—á–∞–µ–º –±–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
            )
            
            # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            if message:
                await loading_msg.delete()
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            if not search_results:
                response_text = (
                    f"üîç <b>–ü–æ–∏—Å–∫:</b> {query}\n"
                    f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category or '–í—Å–µ'}\n\n"
                    "‚ùå <b>–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é."
                )
                
                keyboard = SearchKeyboardBuilder.build_no_results_keyboard(query)
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                results_count = len(search_results)
                response_text = (
                    f"üîç <b>–ü–æ–∏—Å–∫:</b> {query}\n"
                    f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {category or '–í—Å–µ'}\n\n"
                    f"‚úÖ <b>–ù–∞–π–¥–µ–Ω–æ:</b> {results_count} —Ç–æ–≤–∞—Ä–æ–≤\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–æ–≤–∞—Ä –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:"
                )
                
                keyboard = SearchKeyboardBuilder.build_search_results_keyboard(
                    search_results=search_results,
                    current_page=0,
                    query=query,
                    category=category
                )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if message:
                await message.answer(
                    response_text,
                    reply_markup=keyboard,
                    parse_mode="HTML"
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ (—Ç—Ä–µ–±—É–µ—Ç—Å—è session)
            # await self.save_assistant_message(session, user_id, chat_id, response_text)
            
        except Exception as e:
            self._logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–æ–∏—Å–∫–∞: {e}")
            error_text = "‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
            if message:
                await message.answer(error_text)
            
            # await self.save_assistant_message(session, user_id, chat_id, error_text)

    async def callback_product_photo(self, callback: CallbackQuery, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–∫–∞–∑–∞ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞."""
        await callback.answer()
        
        product_id = callback.data.split(":", 1)[1]
        await callback.message.edit_text(
            f"üì∑ <b>–§–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞ ID: {product_id}</b>\n\n"
            "–ü—Ä–æ—Å–º–æ—Ç—Ä —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π —Ç–æ–≤–∞—Ä–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∏—Ç–µ—Ä–∞—Ü–∏—è—Ö.",
            parse_mode="HTML",
            reply_markup=SearchKeyboardBuilder.back_to_search_menu()
        )

    async def callback_product_page(self, callback: CallbackQuery, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞."""
        await callback.answer()
        
        product_id = callback.data.split(":", 1)[1]
        await callback.message.edit_text(
            f"üåê <b>–°—Ç—Ä–∞–Ω–∏—Ü–∞ —Ç–æ–≤–∞—Ä–∞ ID: {product_id}</b>\n\n"
            "–ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≤–µ–±-—Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∏—Ç–µ—Ä–∞—Ü–∏—è—Ö.",
            parse_mode="HTML",
            reply_markup=SearchKeyboardBuilder.back_to_search_menu()
        )

    async def callback_ask_about_product(self, callback: CallbackQuery, state: FSMContext) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–∞ –æ —Ç–æ–≤–∞—Ä–µ."""
        await callback.answer()
        
        product_id = callback.data.split(":", 1)[1]
        await callback.message.edit_text(
            f"‚ùì <b>–í–æ–ø—Ä–æ—Å –æ —Ç–æ–≤–∞—Ä–µ ID: {product_id}</b>\n\n"
            "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ —Ç–æ–≤–∞—Ä–µ –º–µ–Ω–µ–¥–∂–µ—Ä—É –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∏—Ç–µ—Ä–∞—Ü–∏—è—Ö.",
            parse_mode="HTML",
            reply_markup=SearchKeyboardBuilder.back_to_search_menu()
        )
