"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∏ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–æ–≤.
–°–æ–≥–ª–∞—Å–Ω–æ @vision.md - FSM –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ —Å–±–æ—Ä–∞ —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π.
"""
import logging
from typing import Optional

from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, Contact
from aiogram.fsm.context import FSMContext
from aiogram.types import ReplyKeyboardRemove
from sqlalchemy.ext.asyncio import AsyncSession
from pydantic import ValidationError

from src.application.telegram.states.lead_states import LeadStates
from src.application.telegram.keyboards.lead_keyboards import (
    get_contact_manager_keyboard,
    get_contact_data_choice_keyboard,
    get_phone_request_keyboard,
    get_confirmation_keyboard,
    get_skip_optional_keyboard,
    get_edit_lead_keyboard
)
from src.application.telegram.services.lead_service import LeadService, LeadCreateRequest
from src.application.telegram.services.message_service import save_message
from src.infrastructure.logging.hybrid_logger import hybrid_logger
from src.infrastructure.database.models import User
from sqlalchemy import select


class LeadHandlers:
    """–ö–ª–∞—Å—Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–∏–¥–∞–º–∏"""
    
    def __init__(self, lead_service: LeadService) -> None:
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –ª–∏–¥–æ–≤"""
        self.lead_service = lead_service
        self.router = Router()
        self._logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers
        self._register_handlers()
    
    def _register_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ help –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å lead_keyboards
        self.router.callback_query.register(
            self.handle_help_callback,
            F.data == "help"
        )
        
        # Callback handlers
        self.router.callback_query.register(
            self.handle_contact_manager,
            F.data == "contact_manager"
        )
        self.router.callback_query.register(
            self.handle_quick_contact,
            F.data == "quick_contact"
        )
        self.router.callback_query.register(
            self.handle_full_contact_form,
            F.data == "full_contact_form"
        )
        self.router.callback_query.register(
            self.handle_share_phone,
            F.data == "share_phone"
        )
        self.router.callback_query.register(
            self.handle_enter_email,
            F.data == "enter_email"
        )
        self.router.callback_query.register(
            self.handle_use_telegram,
            F.data == "use_telegram"
        )
        self.router.callback_query.register(
            self.handle_skip_field,
            F.data == "skip_field"
        )
        self.router.callback_query.register(
            self.handle_skip_additional_contact,
            F.data == "skip_additional_contact"
        )
        self.router.callback_query.register(
            self.handle_confirm_lead,
            F.data == "confirm_lead"
        )
        self.router.callback_query.register(
            self.handle_edit_lead,
            F.data == "edit_lead"
        )
        self.router.callback_query.register(
            self.handle_cancel_contact,
            F.data.in_(["cancel_contact", "cancel_lead"])
        )
        
        # Message handlers –¥–ª—è FSM —Å–æ—Å—Ç–æ—è–Ω–∏–π
        self.router.message.register(
            self.process_name_input,
            LeadStates.waiting_for_name
        )
        self.router.message.register(
            self.process_phone_input,
            LeadStates.waiting_for_phone
        )
        self.router.message.register(
            self.process_email_input,
            LeadStates.waiting_for_email
        )
        self.router.message.register(
            self.process_company_input,
            LeadStates.waiting_for_company
        )
        self.router.message.register(
            self.process_question_input,
            LeadStates.waiting_for_question
        )
        
        # –ë—ã—Å—Ç—Ä—ã–π –∫–æ–Ω—Ç–∞–∫—Ç
        self.router.message.register(
            self.process_quick_name,
            LeadStates.quick_contact_name
        )
        self.router.message.register(
            self.process_quick_phone,
            LeadStates.quick_contact_phone
        )
        self.router.message.register(
            self.process_quick_question,
            LeadStates.quick_contact_question
        )
    
    async def handle_contact_manager(
        self, 
        callback: CallbackQuery, 
        state: FSMContext,
        session: AsyncSession
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º'"""
        try:
            await callback.message.edit_text(
                "üìû <b>–°–≤—è–∑—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º</b>\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω—ã–π —Å–ø–æ—Å–æ–±:",
                reply_markup=get_contact_manager_keyboard()
            )
            await callback.answer()
            
        except Exception as e:
            await hybrid_logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_contact_manager: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def handle_help_callback(
        self, 
        callback: CallbackQuery, 
        state: FSMContext,
        session: AsyncSession
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–º–æ—â–∏ –≤ lead_keyboards"""
        try:
            await hybrid_logger.info(f"üîò LeadHandlers.handle_help_callback –≤—ã–∑–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
            await callback.answer()
            
            # –í—ã–∑—ã–≤–∞–µ–º –±–∞–∑–æ–≤—É—é —Å–ø—Ä–∞–≤–∫—É –∏–∑ basic_handlers
            from .basic_handlers import handle_help
            
            # –°–æ–∑–¥–∞–µ–º —Ñ–µ–π–∫–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            fake_message = type('obj', (object,), {
                'chat': callback.message.chat,
                'from_user': callback.from_user,
                'text': '/help',
                'answer': callback.message.edit_text
            })
            
            await handle_help(fake_message, session)
            
        except Exception as e:
            await hybrid_logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_help_callback: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def handle_quick_contact(
        self, 
        callback: CallbackQuery, 
        state: FSMContext,
        session: AsyncSession
    ) -> None:
        """–ë—ã—Å—Ç—Ä—ã–π —Å–±–æ—Ä –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        try:
            await callback.message.edit_text(
                "‚ö° <b>–ë—ã—Å—Ç—Ä—ã–π –∫–æ–Ω—Ç–∞–∫—Ç</b>\n\n"
                "–£–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
                reply_markup=None
            )
            await state.set_state(LeadStates.quick_contact_name)
            await callback.answer()
            
        except Exception as e:
            await hybrid_logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_quick_contact: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def handle_full_contact_form(
        self, 
        callback: CallbackQuery, 
        state: FSMContext,
        session: AsyncSession
    ) -> None:
        """–ü–æ–ª–Ω–∞—è —Ñ–æ—Ä–º–∞ —Å–±–æ—Ä–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤"""
        try:
            await callback.message.edit_text(
                "üìù <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è –∑–∞—è–≤–∫–∞</b>\n\n"
                "–î–ª—è –Ω–∞—á–∞–ª–∞ —É–∫–∞–∂–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
                reply_markup=None
            )
            await state.set_state(LeadStates.waiting_for_name)
            await callback.answer()
            
        except Exception as e:
            await hybrid_logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_full_contact_form: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def process_name_input(
        self, 
        message: Message, 
        state: FSMContext,
        session: AsyncSession
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
        try:
            name = message.text.strip()
            if len(name) < 1:
                await message.answer("‚ùå –ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            if len(name) > 200:
                await message.answer("‚ùå –ò–º—è —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data(name=name)
            
            await message.answer(
                f"üë§ –ò–º—è: <b>{name}</b>\n\n"
                "üì± –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏:",
                reply_markup=get_contact_data_choice_keyboard()
            )
            
        except Exception as e:
            await hybrid_logger.error(f"–û—à–∏–±–∫–∞ –≤ process_name_input: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def handle_share_phone(
        self, 
        callback: CallbackQuery, 
        state: FSMContext,
        session: AsyncSession
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º'"""
        try:
            await callback.message.edit_text(
                "üì± <b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>\n\n"
                "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –≤—Ä—É—á–Ω—É—é:",
                reply_markup=None
            )
            
            await callback.message.answer(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–±:",
                reply_markup=get_phone_request_keyboard()
            )
            
            await state.set_state(LeadStates.waiting_for_phone)
            await callback.answer()
            
        except Exception as e:
            await hybrid_logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_share_phone: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def process_phone_input(
        self, 
        message: Message, 
        state: FSMContext,
        session: AsyncSession
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
        try:
            # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await message.answer(".", reply_markup=ReplyKeyboardRemove())
            
            phone = None
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
            if message.contact:
                phone = message.contact.phone_number
                if not phone.startswith('+'):
                    phone = '+' + phone
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞
            elif message.text:
                if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
                    await self._cancel_form(message, state)
                    return
                elif message.text == "‚è≠ –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é":
                    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (+7...):")
                    return
                else:
                    phone = message.text.strip()
            
            if not phone:
                await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è —á–µ—Ä–µ–∑ LeadCreateRequest
            try:
                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
                temp_data = LeadCreateRequest(name="temp", phone=phone)
                validated_phone = temp_data.phone
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–∞–ª–∏–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω
                await state.update_data(phone=validated_phone)
                
                await message.answer(
                    f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: <b>{validated_phone}</b>\n\n"
                    "üìß –•–æ—Ç–∏—Ç–µ —Ç–∞–∫–∂–µ —É–∫–∞–∑–∞—Ç—å email? (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
                    reply_markup=get_skip_optional_keyboard()
                )
                await state.set_state(LeadStates.waiting_for_email)
                
            except ValidationError as ve:
                error_msg = "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞.\n"
                for error in ve.errors():
                    error_msg += f"‚Ä¢ {error['msg']}\n"
                error_msg += "\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                await message.answer(error_msg)
                
        except Exception as e:
            await hybrid_logger.error(f"–û—à–∏–±–∫–∞ –≤ process_phone_input: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def handle_enter_email(
        self, 
        callback: CallbackQuery, 
        state: FSMContext,
        session: AsyncSession
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ '–í–≤–µ—Å—Ç–∏ email'"""
        try:
            await callback.message.edit_text(
                "üìß <b>Email –∞–¥—Ä–µ—Å</b>\n\n"
                "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email –∞–¥—Ä–µ—Å:",
                reply_markup=get_skip_optional_keyboard()
            )
            await state.set_state(LeadStates.waiting_for_email)
            await callback.answer()
            
        except Exception as e:
            await hybrid_logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_enter_email: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def process_email_input(
        self, 
        message: Message, 
        state: FSMContext,
        session: AsyncSession
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ email"""
        try:
            email = message.text.strip()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è email
            try:
                temp_data = LeadCreateRequest(name="temp", email=email)
                validated_email = str(temp_data.email)
                
                await state.update_data(email=validated_email)
                
                await message.answer(
                    f"üìß Email: <b>{validated_email}</b>\n\n"
                    "üè¢ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):",
                    reply_markup=get_skip_optional_keyboard()
                )
                await state.set_state(LeadStates.waiting_for_company)
                
            except ValidationError:
                await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email –∞–¥—Ä–µ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                
        except Exception as e:
            await hybrid_logger.error(f"–û—à–∏–±–∫–∞ –≤ process_email_input: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def handle_use_telegram(
        self, 
        callback: CallbackQuery, 
        state: FSMContext,
        session: AsyncSession
    ) -> None:
        """–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ Telegram –∫–∞–∫ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            telegram_username = callback.from_user.username
            if telegram_username:
                telegram_contact = f"@{telegram_username}"
                await state.update_data(telegram=telegram_contact)
                
                await callback.message.edit_text(
                    f"üí¨ Telegram: <b>{telegram_contact}</b>\n\n"
                    "üè¢ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):",
                    reply_markup=get_skip_optional_keyboard()
                )
                await state.set_state(LeadStates.waiting_for_company)
            else:
                await callback.message.edit_text(
                    "‚ùå –£ –≤–∞—Å –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω username –≤ Telegram.\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–π —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏:",
                    reply_markup=get_contact_data_choice_keyboard()
                )
            
            await callback.answer()
            
        except Exception as e:
            await hybrid_logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_use_telegram: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def handle_skip_field(
        self, 
        callback: CallbackQuery, 
        state: FSMContext,
        session: AsyncSession
    ) -> None:
        """–ü—Ä–æ–ø—É—Å–∫ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –ø–æ–ª—è"""
        try:
            current_state = await state.get_state()
            
            if current_state == LeadStates.waiting_for_email.state:
                await callback.message.edit_text(
                    "üè¢ –£–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):",
                    reply_markup=get_skip_optional_keyboard()
                )
                await state.set_state(LeadStates.waiting_for_company)
                
            elif current_state == LeadStates.waiting_for_company.state:
                await callback.message.edit_text(
                    "‚ùì –û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):",
                    reply_markup=get_skip_optional_keyboard()
                )
                await state.set_state(LeadStates.waiting_for_question)
                
            elif current_state == LeadStates.waiting_for_question.state:
                await self._show_confirmation(callback.message, state)
            
            await callback.answer()
            
        except Exception as e:
            await hybrid_logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_skip_field: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    async def handle_skip_additional_contact(
        self, 
        callback: CallbackQuery, 
        state: FSMContext,
        session: AsyncSession
    ) -> None:
        """–ü—Ä–æ–ø—É—Å–∫ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        try:
            await callback.answer()
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–º—É –ø–æ–ª—é –∏–ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            current_state = await state.get_state()
            
            if current_state == LeadStates.waiting_for_phone.state:
                # –ï—Å–ª–∏ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ email
                await callback.message.edit_text(
                    "üìß –£–∫–∞–∂–∏—Ç–µ email –¥–ª—è —Å–≤—è–∑–∏ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):",
                    reply_markup=get_skip_optional_keyboard()
                )
                await state.set_state(LeadStates.waiting_for_email)
            else:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å –∏–º–µ—é—â–∏–º–∏—Å—è –¥–∞–Ω–Ω—ã–º–∏
                await self._show_confirmation(callback.message, state)
                
        except Exception as e:
            await hybrid_logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_skip_additional_contact: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def process_company_input(
        self, 
        message: Message, 
        state: FSMContext,
        session: AsyncSession
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–æ–º–ø–∞–Ω–∏–∏"""
        try:
            company = message.text.strip()
            
            if len(company) > 300:
                await message.answer("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ (–º–∞–∫—Å–∏–º—É–º 300 —Å–∏–º–≤–æ–ª–æ–≤). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            await state.update_data(company=company)
            
            await message.answer(
                f"üè¢ –ö–æ–º–ø–∞–Ω–∏—è: <b>{company}</b>\n\n"
                "‚ùì –û–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—å (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ):",
                reply_markup=get_skip_optional_keyboard()
            )
            await state.set_state(LeadStates.waiting_for_question)
            
        except Exception as e:
            await hybrid_logger.error(f"–û—à–∏–±–∫–∞ –≤ process_company_input: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def process_question_input(
        self, 
        message: Message, 
        state: FSMContext,
        session: AsyncSession
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤–æ–ø—Ä–æ—Å–∞"""
        try:
            question = message.text.strip()
            await state.update_data(question=question)
            await self._show_confirmation(message, state)
            
        except Exception as e:
            await hybrid_logger.error(f"–û—à–∏–±–∫–∞ –≤ process_question_input: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def _show_confirmation(self, message: Message, state: FSMContext) -> None:
        """–ü–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        try:
            data = await state.get_data()
            
            confirmation_text = "üìã <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ:</b>\n\n"
            confirmation_text += f"üë§ <b>–ò–º—è:</b> {data.get('name', '‚Äî')}\n"
            
            if data.get('phone'):
                confirmation_text += f"üì± <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data['phone']}\n"
            if data.get('email'):
                confirmation_text += f"üìß <b>Email:</b> {data['email']}\n"
            if data.get('telegram'):
                confirmation_text += f"üí¨ <b>Telegram:</b> {data['telegram']}\n"
            if data.get('company'):
                confirmation_text += f"üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {data['company']}\n"
            if data.get('question'):
                confirmation_text += f"‚ùì <b>–í–æ–ø—Ä–æ—Å:</b> {data['question']}\n"
            
            confirmation_text += "\n‚úÖ –í—Å–µ –≤–µ—Ä–Ω–æ?"
            
            await message.answer(
                confirmation_text,
                reply_markup=get_confirmation_keyboard()
            )
            await state.set_state(LeadStates.confirming_lead)
            
        except Exception as e:
            await hybrid_logger.error(f"–û—à–∏–±–∫–∞ –≤ _show_confirmation: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
    
    async def handle_confirm_lead(
        self, 
        callback: CallbackQuery, 
        state: FSMContext,
        session: AsyncSession
    ) -> None:
        """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ª–∏–¥–∞"""
        try:
            data = await state.get_data()
            
            # –ü–æ–ª—É—á–∞–µ–º user_id
            user_query = select(User).where(User.chat_id == callback.message.chat.id)
            result = await session.execute(user_query)
            user = result.scalar_one_or_none()
            
            if not user:
                await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –°–æ–∑–¥–∞–µ–º –ª–∏–¥
            lead_data = LeadCreateRequest(
                name=data['name'],
                phone=data.get('phone'),
                email=data.get('email'),
                telegram=data.get('telegram'),
                company=data.get('company'),
                question=data.get('question'),
                auto_created=False
            )
            
            lead = await self.lead_service.create_lead(session, user.id, lead_data)
            
            await callback.message.edit_text(
                "‚úÖ <b>–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>\n\n"
                "üìû –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
                f"üìã –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: <code>{lead.id}</code>\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ! üôè",
                reply_markup=None
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º
            await self._notify_managers(session, lead, callback.message.chat.id)
            
            await state.clear()
            await callback.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
            
        except Exception as e:
            await hybrid_logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_confirm_lead: {e}")
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞—è–≤–∫–∏")
            await callback.message.edit_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏.\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –¥—Ä—É–≥–∏–º —Å–ø–æ—Å–æ–±–æ–º.",
                reply_markup=None
            )

    async def handle_edit_lead(
        self, 
        callback: CallbackQuery, 
        state: FSMContext,
        session: AsyncSession
    ) -> None:
        """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ª–∏–¥–∞"""
        try:
            await callback.answer()
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            user_data = await state.get_data()
            name = user_data.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            phone = user_data.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            email = user_data.get('email', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            company = user_data.get('company', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            question = user_data.get('question', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
            
            edit_text = (
                "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏</b>\n\n"
                f"üë§ <b>–ò–º—è:</b> {name}\n"
                f"üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {phone}\n"
                f"üìß <b>Email:</b> {email}\n"
                f"üè¢ <b>–ö–æ–º–ø–∞–Ω–∏—è:</b> {company}\n"
                f"‚ùì <b>–í–æ–ø—Ä–æ—Å:</b> {question}\n\n"
                "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–¥–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –∏—Ç–µ—Ä–∞—Ü–∏—è—Ö.\n"
                "–°–µ–π—á–∞—Å –º–æ–∂–µ—Ç–µ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ –∏–ª–∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ."
            )
            
            await callback.message.edit_text(
                edit_text,
                parse_mode="HTML",
                reply_markup=get_confirmation_keyboard()
            )
            
        except Exception as e:
            await hybrid_logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_edit_lead: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    async def handle_cancel_contact(
        self, 
        callback: CallbackQuery, 
        state: FSMContext,
        session: AsyncSession
    ) -> None:
        """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏–¥–∞"""
        try:
            await state.clear()
            await callback.message.edit_text(
                "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.\n\n"
                "–ï—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–º–æ—â—å - –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å! üòä",
                reply_markup=None
            )
            await callback.answer("–û—Ç–º–µ–Ω–µ–Ω–æ")
            
        except Exception as e:
            await hybrid_logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_cancel_contact: {e}")
            await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    # –ë—ã—Å—Ç—Ä—ã–π –∫–æ–Ω—Ç–∞–∫—Ç handlers
    async def process_quick_name(
        self, 
        message: Message, 
        state: FSMContext,
        session: AsyncSession
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏ –≤ –±—ã—Å—Ç—Ä–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–µ"""
        try:
            name = message.text.strip()
            if len(name) < 1 or len(name) > 200:
                await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            await state.update_data(name=name)
            await message.answer(
                f"üë§ –ò–º—è: <b>{name}</b>\n\n"
                "üì± –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:",
                reply_markup=get_phone_request_keyboard()
            )
            await state.set_state(LeadStates.quick_contact_phone)
            
        except Exception as e:
            await hybrid_logger.error(f"–û—à–∏–±–∫–∞ –≤ process_quick_name: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def process_quick_phone(
        self, 
        message: Message, 
        state: FSMContext,
        session: AsyncSession
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –±—ã—Å—Ç—Ä–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–µ"""
        try:
            # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ process_phone_input, –Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É
            await message.answer(".", reply_markup=ReplyKeyboardRemove())
            
            phone = None
            if message.contact:
                phone = message.contact.phone_number
                if not phone.startswith('+'):
                    phone = '+' + phone
            elif message.text and message.text not in ["‚ùå –û—Ç–º–µ–Ω–∞", "‚è≠ –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é"]:
                phone = message.text.strip()
            
            if message.text == "‚ùå –û—Ç–º–µ–Ω–∞":
                await self._cancel_form(message, state)
                return
            elif message.text == "‚è≠ –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é":
                await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:")
                return
            
            if not phone:
                await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
                return
            
            try:
                temp_data = LeadCreateRequest(name="temp", phone=phone)
                validated_phone = temp_data.phone
                
                await state.update_data(phone=validated_phone)
                await message.answer(
                    f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: <b>{validated_phone}</b>\n\n"
                    "‚ùì –ö—Ä–∞—Ç–∫–æ –æ–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
                    reply_markup=get_skip_optional_keyboard()
                )
                await state.set_state(LeadStates.quick_contact_question)
                
            except ValidationError as ve:
                error_msg = "‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:"
                await message.answer(error_msg)
                
        except Exception as e:
            await hybrid_logger.error(f"–û—à–∏–±–∫–∞ –≤ process_quick_phone: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def process_quick_question(
        self, 
        message: Message, 
        state: FSMContext,
        session: AsyncSession
    ) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ –≤ –±—ã—Å—Ç—Ä–æ–º –∫–æ–Ω—Ç–∞–∫—Ç–µ"""
        try:
            question = message.text.strip()
            await state.update_data(question=question)
            
            # –°—Ä–∞–∑—É —Å–æ–∑–¥–∞–µ–º –ª–∏–¥
            data = await state.get_data()
            
            # –ü–æ–ª—É—á–∞–µ–º user_id
            user_query = select(User).where(User.chat_id == message.chat.id)
            result = await session.execute(user_query)
            user = result.scalar_one_or_none()
            
            if not user:
                await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º Telegram username –µ—Å–ª–∏ –µ—Å—Ç—å
            telegram_contact = None
            if message.from_user.username:
                telegram_contact = f"@{message.from_user.username}"
            
            lead_data = LeadCreateRequest(
                name=data['name'],
                phone=data.get('phone'),
                telegram=telegram_contact,
                question=question,
                auto_created=False
            )
            
            lead = await self.lead_service.create_lead(session, user.id, lead_data)
            
            await message.answer(
                "‚úÖ <b>–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!</b>\n\n"
                "üìû –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n"
                f"üìã –ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏: <code>{lead.id}</code>",
                reply_markup=ReplyKeyboardRemove()
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤
            await self._notify_managers(session, lead, message.chat.id)
            
            await state.clear()
            
        except Exception as e:
            await hybrid_logger.error(f"–û—à–∏–±–∫–∞ –≤ process_quick_question: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∑–∞—è–≤–∫–∏.")
    
    async def _cancel_form(self, message: Message, state: FSMContext) -> None:
        """–û—Ç–º–µ–Ω–∞ —Ñ–æ—Ä–º—ã"""
        await state.clear()
        await message.answer(
            "‚ùå –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=ReplyKeyboardRemove()
        )
    
    async def _notify_managers(self, session: AsyncSession, lead, chat_id: int) -> None:
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤ –æ –Ω–æ–≤–æ–º –ª–∏–¥–µ"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            from aiogram import Bot
            from src.config.settings import settings
            from src.infrastructure.notifications.telegram_notifier import get_telegram_notifier
            
            bot = Bot(token=settings.bot_token)
            notifier = get_telegram_notifier(bot)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
            success = await notifier.notify_new_lead(lead, chat_id)
            
            if success:
                await hybrid_logger.business(
                    "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∏–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º",
                    {
                        "lead_id": lead.id,
                        "chat_id": chat_id,
                        "auto_created": lead.auto_created
                    }
                )
            else:
                await hybrid_logger.warning(
                    "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º",
                    {"lead_id": lead.id}
                )
                
        except Exception as e:
            await hybrid_logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤: {e}")
