"""
LLM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è Telegram –±–æ—Ç–∞.
–ò–Ω—Ç–µ–≥—Ä–∏—Ä—É—é—Ç —É–º–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã —á–µ—Ä–µ–∑ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤.
"""
import logging
from typing import Optional

from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession

from ....domain.services import search_orchestrator, is_contact_request
from ..keyboards.search_keyboards import get_contact_manager_keyboard
from ..services.message_service import save_message, get_conversation_history


class LLMHandlers:
    """
    –ö–ª–∞—Å—Å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è LLM –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏.
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Å–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –ø–æ–∏—Å–∫–æ–≤—ã–π –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä.
    """
    
    def __init__(self) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
        
        Args:
            message_service: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        """
        self.router = Router()
        self._logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º handlers
        self._register_handlers()
    
    def _register_handlers(self) -> None:
        """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ LLM."""
        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–∫—Ä–æ–º–µ –∫–æ–º–∞–Ω–¥)
        self.router.message.register(
            self.handle_text_message,
            F.text & ~F.text.startswith('/')
        )
    
    async def handle_text_message(self, message: Message, session: AsyncSession) -> None:
        """
        –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç LLM –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            from ..services.user_service import ensure_user_exists
            await ensure_user_exists(
                session=session,
                chat_id=message.chat.id,
                telegram_user_id=message.from_user.id,
                username=message.from_user.username,
                first_name=message.from_user.first_name,
                last_name=message.from_user.last_name
            )
            
            user_text = message.text.strip()
            chat_id = message.chat.id
            
            if not user_text:
                await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
                return
            
            self._logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ LLM –∑–∞–ø—Ä–æ—Å–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: '{user_text[:50]}...'")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–µ—á–∞—Ç–∏
            await message.bot.send_chat_action(chat_id, "typing")
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –æ—Ä–∫–µ—Å—Ç—Ä–∞—Ç–æ—Ä
            result = await search_orchestrator.process_user_query(
                user_query=user_text,
                chat_id=chat_id,
                session=session
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            response_text = result["response"]
            query_type = result["query_type"]
            suggested_actions = result.get("suggested_actions", [])
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            keyboard = None
            if "contact_manager" in suggested_actions or query_type == "CONTACT":
                keyboard = get_contact_manager_keyboard()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å –≤–æ–∑–º–æ–∂–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await message.answer(
                response_text,
                reply_markup=keyboard
            )
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            self._logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω LLM –æ—Ç–≤–µ—Ç —Ç–∏–ø–∞ {query_type}, –¥–ª–∏–Ω–∞: {len(response_text)} —Å–∏–º–≤–æ–ª–æ–≤")
            
            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–ø—Ä–æ—Å–∞
            await self._handle_post_response_actions(
                message, query_type, suggested_actions, result.get("metadata", {}), session
            )
            
        except Exception as e:
            self._logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ LLM —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await message.answer(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º.",
                reply_markup=get_contact_manager_keyboard()
            )
    
    async def _handle_post_response_actions(
        self,
        message: Message,
        query_type: str,
        suggested_actions: list,
        metadata: dict,
        session: AsyncSession
    ) -> None:
        """
        –í—ã–ø–æ–ª–Ω—è–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞.
        
        Args:
            message: –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            query_type: –¢–∏–ø –∑–∞–ø—Ä–æ—Å–∞
            suggested_actions: –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            metadata: –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
            session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        """
        try:
            # –ï—Å–ª–∏ —ç—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Å—Ç–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ
            if query_type == "CONTACT" or "create_lead" in suggested_actions:
                await self._handle_contact_follow_up(message, session)
            
            # –ï—Å–ª–∏ –ø–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
            if query_type == "PRODUCT" and metadata.get("search_results_count", 0) == 0:
                await self._handle_no_results_follow_up(message)
            
            # –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏
            if query_type == "GENERAL" and metadata.get("is_first_message", False):
                await self._show_bot_capabilities(message)
                
        except Exception as e:
            self._logger.error(f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: {e}")
    
    async def _handle_contact_follow_up(
        self, 
        message: Message, 
        session: AsyncSession
    ) -> None:
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –∫–æ–Ω—Ç–∞–∫—Ç."""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_has_contacts = await self._check_user_contacts(
                message.from_user.id, session
            )
            
            if not user_has_contacts:
                follow_up_text = (
                    "üíº –î–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ:\n"
                    "‚Ä¢ –í–∞—à–µ –∏–º—è\n"
                    "‚Ä¢ –¢–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ email\n"
                    "‚Ä¢ –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞\n\n"
                    "–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!"
                )
                
                await message.answer(follow_up_text)
                
        except Exception as e:
            self._logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ follow-up –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç–∞: {e}")
    
    async def _handle_no_results_follow_up(self, message: Message) -> None:
        """–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞."""
        try:
            suggestions_text = (
                "üîç –ù–µ –Ω–∞—à–ª–∏ —Ç–æ, —á—Ç–æ –∏—Å–∫–∞–ª–∏? –ü–æ–ø—Ä–æ–±—É–π—Ç–µ:\n\n"
                "‚Ä¢ –£—Ç–æ—á–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä, —É–∫–∞–∑–∞—Ç—å –º–æ–¥–µ–ª—å –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª)\n"
                "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥—Ä—É–≥–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n"
                "‚Ä¢ –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n\n"
                "–ù–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –ø–æ–º–æ–≥—É—Ç –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω–æ–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ!"
            )
            
            await message.answer(
                suggestions_text,
                reply_markup=get_contact_manager_keyboard()
            )
            
        except Exception as e:
            self._logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π: {e}")
    
    async def _show_bot_capabilities(self, message: Message) -> None:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞ –Ω–æ–≤–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
        try:
            capabilities_text = (
                "ü§ñ –Ø –º–æ–≥—É –ø–æ–º–æ—á—å –≤–∞–º:\n\n"
                "üîç –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã –≤ –∫–∞—Ç–∞–ª–æ–≥–µ (40,000+ –ø–æ–∑–∏—Ü–∏–π)\n"
                "‚ÑπÔ∏è –†–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ–± —É—Å–ª—É–≥–∞—Ö –∫–æ–º–ø–∞–Ω–∏–∏\n"
                "üìû –°–≤—è–∑–∞—Ç—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –¥–ª—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏\n"
                "‚ùì –û—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –æ–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã\n\n"
                "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç!"
            )
            
            await message.answer(capabilities_text)
            
        except Exception as e:
            self._logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∫–∞–∑–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π –±–æ—Ç–∞: {e}")
    
    async def _check_user_contacts(
        self, 
        telegram_user_id: int, 
        session: AsyncSession
    ) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        
        Args:
            telegram_user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            True –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        """
        try:
            from sqlalchemy import select
            from ....infrastructure.database.models import User
            
            user_query = select(User).where(User.telegram_user_id == telegram_user_id)
            result = await session.execute(user_query)
            user = result.scalar_one_or_none()
            
            if user:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
                has_contacts = bool(
                    user.phone or 
                    user.email or 
                    (user.first_name and user.last_name)
                )
                return has_contacts
            
            return False
            
        except Exception as e:
            self._logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            return False


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def create_llm_handlers() -> LLMHandlers:
    """
    –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä LLM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤.
    
    Args:
        message_service: –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        
    Returns:
        –ù–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–µ LLM –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    """
    return LLMHandlers()
