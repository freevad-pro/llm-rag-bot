"""
–ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –≤ Telegram –±–æ—Ç–µ.
–†–µ–∞–ª–∏–∑—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞.
"""

from typing import Optional

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from ....domain.entities.product import SearchResult


class SearchKeyboardBuilder:
    """
    –°—Ç—Ä–æ–∏—Ç–µ–ª—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤.
    """
    
    @staticmethod
    def build_categories_keyboard(categories: list[str], current_page: int = 0, page_size: int = 8) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏ —Ç–æ–≤–∞—Ä–æ–≤.
        
        Args:
            categories: –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            current_page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            page_size: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            
        Returns:
            Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
        """
        builder = InlineKeyboardBuilder()
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        start_idx = current_page * page_size
        end_idx = start_idx + page_size
        page_categories = categories[start_idx:end_idx]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π (–ø–æ 2 –≤ —Ä—è–¥)
        for i in range(0, len(page_categories), 2):
            row_buttons = []
            
            # –ü–µ—Ä–≤–∞—è –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥—É
            category = page_categories[i]
            row_buttons.append(
                InlineKeyboardButton(
                    text=category[:25] + "..." if len(category) > 25 else category,
                    callback_data=f"search_category:{category}"
                )
            )
            
            # –í—Ç–æ—Ä–∞—è –∫–Ω–æ–ø–∫–∞ –≤ —Ä—è–¥—É (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if i + 1 < len(page_categories):
                category = page_categories[i + 1]
                row_buttons.append(
                    InlineKeyboardButton(
                        text=category[:25] + "..." if len(category) > 25 else category,
                        callback_data=f"search_category:{category}"
                    )
                )
            
            builder.row(*row_buttons)
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏
        nav_buttons = []
        total_pages = (len(categories) + page_size - 1) // page_size
        
        if current_page > 0:
            nav_buttons.append(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=f"categories_page:{current_page - 1}"
                )
            )
        
        if current_page < total_pages - 1:
            nav_buttons.append(
                InlineKeyboardButton(
                    text="‚û°Ô∏è –î–∞–ª–µ–µ", 
                    callback_data=f"categories_page:{current_page + 1}"
                )
            )
        
        if nav_buttons:
            builder.row(*nav_buttons)
        
        # –ö–Ω–æ–ø–∫–∞ "–í—Å–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏" –∏ "–ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É"
        builder.row(
            InlineKeyboardButton(
                text="üîç –ü–æ–∏—Å–∫ –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞",
                callback_data="search_all_categories"
            )
        )
        
        builder.row(
            InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="main_menu"
            )
        )
        
        return builder.as_markup()
    
    @staticmethod
    def build_search_results_keyboard(
        search_results: list[SearchResult], 
        current_page: int = 0,
        page_size: int = 5,
        query: str = "",
        category: Optional[str] = None
    ) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø–æ–∏—Å–∫–∞.
        
        Args:
            search_results: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
            current_page: –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            page_size: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å (–¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏)
            category: –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ñ–∏–ª—å—Ç—Ä–∞ (–¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏)
            
        Returns:
            Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
        """
        builder = InlineKeyboardBuilder()
        
        # –ü–∞–≥–∏–Ω–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        start_idx = current_page * page_size
        end_idx = start_idx + page_size
        page_results = search_results[start_idx:end_idx]
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤
        for i, result in enumerate(page_results, 1):
            product = result.product
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏
            button_text = f"{i}. {product.get_display_name()}"
            if len(button_text) > 60:
                button_text = button_text[:57] + "..."
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
            relevance = int(result.score * 100)
            button_text += f" ({relevance}%)"
            
            builder.row(
                InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"product_details:{product.id}"
                )
            )
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –º–µ–∂–¥—É —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        nav_buttons = []
        total_pages = (len(search_results) + page_size - 1) // page_size
        
        if current_page > 0:
            nav_buttons.append(
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
                    callback_data=f"search_results_page:{current_page - 1}:{query}:{category or ''}"
                )
            )
        
        if current_page < total_pages - 1:
            nav_buttons.append(
                InlineKeyboardButton(
                    text="‚û°Ô∏è –î–∞–ª–µ–µ",
                    callback_data=f"search_results_page:{current_page + 1}:{query}:{category or ''}"
                )
            )
        
        if nav_buttons:
            builder.row(*nav_buttons)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        action_buttons = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–æ–≤—ã–π –ø–æ–∏—Å–∫"
        action_buttons.append(
            InlineKeyboardButton(
                text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫",
                callback_data="new_search"
            )
        )
        
        # –ö–Ω–æ–ø–∫–∞ "–°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º"
        action_buttons.append(
            InlineKeyboardButton(
                text="üë®‚Äçüíº –ú–µ–Ω–µ–¥–∂–µ—Ä",
                callback_data="contact_manager"
            )
        )
        
        builder.row(*action_buttons)
        
        # –ö–Ω–æ–ø–∫–∞ "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"
        builder.row(
            InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="main_menu"
            )
        )
        
        return builder.as_markup()
    
    @staticmethod
    def build_product_details_keyboard(
        product_id: str,
        has_photo: bool = False,
        has_page_url: bool = False
    ) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ–≤–∞—Ä–µ.
        
        Args:
            product_id: ID —Ç–æ–≤–∞—Ä–∞
            has_photo: –ï—Å—Ç—å –ª–∏ —Ñ–æ—Ç–æ —Ç–æ–≤–∞—Ä–∞
            has_page_url: –ï—Å—Ç—å –ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Ç–æ–≤–∞—Ä–∞
            
        Returns:
            Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
        """
        builder = InlineKeyboardBuilder()
        
        # –ü–µ—Ä–≤—ã–π —Ä—è–¥ - –ø—Ä–æ—Å–º–æ—Ç—Ä –º–µ–¥–∏–∞
        media_buttons = []
        
        if has_photo:
            media_buttons.append(
                InlineKeyboardButton(
                    text="üì∑ –§–æ—Ç–æ",
                    callback_data=f"product_photo:{product_id}"
                )
            )
        
        if has_page_url:
            media_buttons.append(
                InlineKeyboardButton(
                    text="üåê –ù–∞ —Å–∞–π—Ç–µ",
                    callback_data=f"product_page:{product_id}"
                )
            )
        
        if media_buttons:
            builder.row(*media_buttons)
        
        # –í—Ç–æ—Ä–æ–π —Ä—è–¥ - –¥–µ–π—Å—Ç–≤–∏—è
        builder.row(
            InlineKeyboardButton(
                text="üíº –ó–∞–∫–∞–∑–∞—Ç—å",
                callback_data=f"order_product:{product_id}"
            ),
            InlineKeyboardButton(
                text="‚ùì –í–æ–ø—Ä–æ—Å",
                callback_data=f"ask_about_product:{product_id}"
            )
        )
        
        # –¢—Ä–µ—Ç–∏–π —Ä—è–¥ - –Ω–∞–≤–∏–≥–∞—Ü–∏—è
        builder.row(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º",
                callback_data="back_to_search_results"
            ),
            InlineKeyboardButton(
                text="üîç –ù–æ–≤—ã–π –ø–æ–∏—Å–∫",
                callback_data="new_search"
            )
        )
        
        # –ß–µ—Ç–≤–µ—Ä—Ç—ã–π —Ä—è–¥ - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        builder.row(
            InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="main_menu"
            )
        )
        
        return builder.as_markup()
    
    @staticmethod
    def build_search_start_keyboard() -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç —Å—Ç–∞—Ä—Ç–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –ø–æ–∏—Å–∫–∞.
        
        Returns:
            Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–ø—Ü–∏—è–º–∏ –ø–æ–∏—Å–∫–∞
        """
        builder = InlineKeyboardBuilder()
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –æ–ø—Ü–∏–∏ –ø–æ–∏—Å–∫–∞
        builder.row(
            InlineKeyboardButton(
                text="üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é",
                callback_data="search_by_name"
            )
        )
        
        builder.row(
            InlineKeyboardButton(
                text="üìÇ –ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                callback_data="search_by_categories"
            )
        )
        
        builder.row(
            InlineKeyboardButton(
                text="üÜî –ü–æ–∏—Å–∫ –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É",
                callback_data="search_by_article"
            )
        )
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
        builder.row(
            InlineKeyboardButton(
                text="üë®‚Äçüíº –°–≤—è–∑–∞—Ç—å—Å—è —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º",
                callback_data="contact_manager"
            )
        )
        
        builder.row(
            InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="main_menu"
            )
        )
        
        return builder.as_markup()
    
    @staticmethod
    def build_no_results_keyboard(query: str) -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ª—É—á–∞—è, –∫–æ–≥–¥–∞ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.
        
        Args:
            query: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            
        Returns:
            Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –æ–ø—Ü–∏—è–º–∏
        """
        builder = InlineKeyboardBuilder()
        
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π
        builder.row(
            InlineKeyboardButton(
                text="üîç –ò–∑–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å",
                callback_data="new_search"
            ),
            InlineKeyboardButton(
                text="üìÇ –ü–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
                callback_data="search_by_categories"
            )
        )
        
        builder.row(
            InlineKeyboardButton(
                text="üë®‚Äçüíº –°–ø—Ä–æ—Å–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞",
                callback_data="contact_manager"
            )
        )
        
        builder.row(
            InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="main_menu"
            )
        )
        
        return builder.as_markup()
    
    @staticmethod
    def back_to_search_menu() -> InlineKeyboardMarkup:
        """
        –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –º–µ–Ω—é –ø–æ–∏—Å–∫–∞.
        
        Returns:
            Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É"
        """
        builder = InlineKeyboardBuilder()
        
        builder.row(
            InlineKeyboardButton(
                text="üîç –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É",
                callback_data="new_search"
            )
        )
        
        builder.row(
            InlineKeyboardButton(
                text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                callback_data="main_menu"
            )
        )
        
        return builder.as_markup()


# –ì–æ—Ç–æ–≤—ã–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è —á–∞—Å—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è

def get_main_search_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–∏—Å–∫–∞."""
    return SearchKeyboardBuilder.build_search_start_keyboard()


def get_contact_manager_keyboard() -> InlineKeyboardMarkup:
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–≤—è–∑–∏ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º."""
    builder = InlineKeyboardBuilder()
    
    builder.row(
        InlineKeyboardButton(
            text="üìû –û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—ã",
            callback_data="leave_contacts"
        )
    )
    
    builder.row(
        InlineKeyboardButton(
            text="üîç –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–∏—Å–∫",
            callback_data="new_search"
        ),
        InlineKeyboardButton(
            text="üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
            callback_data="main_menu"
        )
    )
    
    return builder.as_markup()
