"""
–ë–∏–∑–Ω–µ—Å-—Å—É—â–Ω–æ—Å—Ç—å –ª–∏–¥–∞ –¥–ª—è domain —Å–ª–æ—è.
–°–æ–≥–ª–∞—Å–Ω–æ @vision.md - —á–∏—Å—Ç–∞—è –±–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –±–µ–∑ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.
"""
from dataclasses import dataclass
from datetime import datetime
from typing import Optional
from enum import Enum


class LeadStatus(Enum):
    """–°—Ç–∞—Ç—É—Å—ã —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ª–∏–¥–∞ —Å CRM"""
    PENDING_SYNC = "pending_sync"
    SYNCED = "synced"
    FAILED = "failed"


class LeadSource(Enum):
    """–ò—Å—Ç–æ—á–Ω–∏–∫–∏ –ª–∏–¥–æ–≤"""
    TELEGRAM_BOT = "Telegram Bot"
    WEBSITE_WIDGET = "SalesIQ Chat"


@dataclass
class Lead:
    """
    –ë–∏–∑–Ω–µ—Å-—Å—É—â–Ω–æ—Å—Ç—å –ª–∏–¥–∞.
    –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è: –∏–º—è + –æ–¥–∏–Ω –∫–æ–Ω—Ç–∞–∫—Ç (email/—Ç–µ–ª–µ—Ñ–æ–Ω/telegram).
    """
    # –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    name: str
    
    # –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω)
    phone: Optional[str] = None
    email: Optional[str] = None
    telegram: Optional[str] = None
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
    company: Optional[str] = None
    question: Optional[str] = None
    
    # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    status: LeadStatus = LeadStatus.PENDING_SYNC
    sync_attempts: int = 0
    zoho_lead_id: Optional[str] = None
    last_sync_attempt: Optional[datetime] = None
    auto_created: bool = False
    lead_source: LeadSource = LeadSource.TELEGRAM_BOT
    created_at: Optional[datetime] = None
    
    # –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–æ–ª—è
    id: Optional[int] = None
    user_id: Optional[int] = None
    
    def has_required_contact(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –º–∏–Ω–∏–º—É–º –æ–¥–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞"""
        return bool(self.phone or self.email or self.telegram)
    
    def is_valid(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ª–∏–¥–∞"""
        return bool(
            self.name and 
            self.name.strip() and 
            self.has_required_contact()
        )
    
    def can_retry_sync(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
        return self.sync_attempts < 2 and self.status == LeadStatus.FAILED
    
    def get_display_name(self) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏"""
        return self.name.strip()
    
    def get_primary_contact(self) -> Optional[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if self.phone:
            return f"üìû {self.phone}"
        elif self.email:
            return f"üìß {self.email}"
        elif self.telegram:
            return f"üì± {self.telegram}"
        return None
    
    def to_dict(self) -> dict:
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è JSON —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏"""
        return {
            "id": self.id,
            "user_id": self.user_id,
            "name": self.name,
            "phone": self.phone,
            "email": self.email,
            "telegram": self.telegram,
            "company": self.company,
            "question": self.question,
            "status": self.status.value,
            "sync_attempts": self.sync_attempts,
            "zoho_lead_id": self.zoho_lead_id,
            "last_sync_attempt": self.last_sync_attempt.isoformat() if self.last_sync_attempt else None,
            "auto_created": self.auto_created,
            "lead_source": self.lead_source.value,
            "created_at": self.created_at.isoformat() if self.created_at else None
        }
