"""
–°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã.
–†–∞–±–æ—Ç–∞–µ—Ç —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è (.env) –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –ë–î.
"""
import os
import re
from typing import Dict, Any, List, Optional, Tuple
from pathlib import Path
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from datetime import datetime

from ...infrastructure.database.models import LLMSetting, Prompt, CompanyService, ServiceCategory
from ...config.settings import Settings


class SettingsCategory:
    """–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏"""
    
    def __init__(self, name: str, title: str, icon: str, description: str):
        self.name = name
        self.title = title
        self.icon = icon
        self.description = description


class SettingItem:
    """–≠–ª–µ–º–µ–Ω—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–º–∏"""
    
    def __init__(
        self,
        key: str,
        value: Any,
        title: str,
        description: str = "",
        setting_type: str = "text",  # text, password, number, boolean, select
        source: str = "env",  # env, db
        restart_required: bool = False,
        is_sensitive: bool = False,
        options: Optional[List[str]] = None,
        validation_pattern: Optional[str] = None
    ):
        self.key = key
        self.value = value
        self.title = title
        self.description = description
        self.setting_type = setting_type
        self.source = source
        self.restart_required = restart_required
        self.is_sensitive = is_sensitive
        self.options = options or []
        self.validation_pattern = validation_pattern


class SettingsManagementService:
    """
    –°–µ—Ä–≤–∏—Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ —Å–∏—Å—Ç–µ–º—ã.
    –û–±—ä–µ–¥–∏–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env —Ñ–∞–π–ª–æ–≤ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    
    def __init__(self):
        self.settings = Settings()
        self._env_file_path = Path(".env")
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.categories = {
            "system": SettingsCategory(
                "system", "üîß –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏", "bi-gear",
                "–û—Å–Ω–æ–≤–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∏—Å—Ç–µ–º—ã –∏ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã"
            ),
            "llm": SettingsCategory(
                "llm", "ü§ñ LLM –∏ AI", "bi-robot",
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —è–∑—ã–∫–æ–≤—ã—Ö –º–æ–¥–µ–ª–µ–π –∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞"
            ),
            "search": SettingsCategory(
                "search", "üîç –ü–æ–∏—Å–∫ –∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è", "bi-search",
                "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∫–∞—Ç–∞–ª–æ–≥—É –∏ –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö –≤—ã—á–∏—Å–ª–µ–Ω–∏–π"
            ),
            "notifications": SettingsCategory(
                "notifications", "üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", "bi-bell",
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram –∏ email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
            ),
            "integrations": SettingsCategory(
                "integrations", "üîó –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏", "bi-link-45deg",
                "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –≤–Ω–µ—à–Ω–∏–º —Å–µ—Ä–≤–∏—Å–∞–º –∏ API"
            ),
            "storage": SettingsCategory(
                "storage", "üìÅ –ü—É—Ç–∏ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ", "bi-folder",
                "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º"
            ),
            "security": SettingsCategory(
                "security", "üõ°Ô∏è –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å", "bi-shield-lock",
                "–ö–ª—é—á–∏ –¥–æ—Å—Ç—É–ø–∞, —Ç–æ–∫–µ–Ω—ã –∏ —Å–µ–∫—Ä–µ—Ç—ã"
            ),
            "cost_control": SettingsCategory(
                "cost_control", "üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞–º–∏ –Ω–∞ AI", "bi-cash-coin",
                "–õ–∏–º–∏—Ç—ã —Ç–æ–∫–µ–Ω–æ–≤, –∫–æ–Ω—Ç—Ä–æ–ª—å —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –∞–ª–µ—Ä—Ç—ã"
            )
        }
    
    def get_environment(self) -> Tuple[str, str]:
        """
        –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é —Å—Ä–µ–¥—É –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è.
        
        Returns:
            Tuple[env_name, env_color] - –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ä–µ–¥—ã –∏ —Ü–≤–µ—Ç –¥–ª—è UI
        """
        env = os.getenv("ENVIRONMENT", "").lower()
        
        if env in ["development", "dev"]:
            return "Development", "success"
        elif env in ["testing", "test"]:
            return "Testing", "warning"
        elif env in ["production", "prod"]:
            return "Production", "danger"
        else:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ –¥—Ä—É–≥–∏–º –ø—Ä–∏–∑–Ω–∞–∫–∞–º
            if self.settings.debug:
                return "Development", "success"
            elif "test" in self.settings.database_url.lower():
                return "Testing", "warning"
            else:
                return "Production", "danger"
    
    async def get_all_settings(self, session: AsyncSession) -> Dict[str, List[SettingItem]]:
        """
        –ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∏—Å—Ç–µ–º—ã, —Å–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º.
        
        Args:
            session: –°–µ—Å—Å–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            
        Returns:
            –°–ª–æ–≤–∞—Ä—å –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
        """
        settings_by_category = {}
        
        # –°–∏—Å—Ç–µ–º–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        settings_by_category["system"] = [
            SettingItem(
                "DATABASE_URL", self.settings.database_url,
                "URL –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö", "–°—Ç—Ä–æ–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL",
                "text", "env", True, True
            ),
            SettingItem(
                "DEBUG", self.settings.debug,
                "–†–µ–∂–∏–º –æ—Ç–ª–∞–¥–∫–∏", "–í–∫–ª—é—á–∞–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ",
                "boolean", "env", True
            ),
            SettingItem(
                "LOG_LEVEL", self.settings.log_level,
                "–£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è", "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–∞–ø–∏—Å—ã–≤–∞–µ–º—ã—Ö –ª–æ–≥–æ–≤",
                "select", "env", True, False, ["DEBUG", "INFO", "WARNING", "ERROR", "CRITICAL"]
            ),
            SettingItem(
                "DISABLE_TELEGRAM_BOT", self.settings.disable_telegram_bot,
                "–û—Ç–∫–ª—é—á–∏—Ç—å Telegram –±–æ—Ç–∞", "–ó–∞–ø—É—Å–∫–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å",
                "boolean", "env", True
            )
        ]
        
        # LLM –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        llm_settings = await self._get_llm_settings(session)
        settings_by_category["llm"] = [
            SettingItem(
                "DEFAULT_LLM_PROVIDER", self.settings.default_llm_provider,
                "LLM –ø—Ä–æ–≤–∞–π–¥–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", "–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –ë–î",
                "select", "env", True, False, ["openai", "yandexgpt"]
            ),
            SettingItem(
                "OPENAI_API_KEY", self.settings.openai_api_key,
                "OpenAI API –∫–ª—é—á", "–ö–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ GPT –º–æ–¥–µ–ª—è–º",
                "password", "env", True, True
            ),
            SettingItem(
                "YANDEX_API_KEY", self.settings.yandex_api_key,
                "Yandex API –∫–ª—é—á", "–ö–ª—é—á –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ YandexGPT",
                "password", "env", True, True
            ),
            SettingItem(
                "YANDEX_FOLDER_ID", self.settings.yandex_folder_id,
                "Yandex Folder ID", "ID –ø–∞–ø–∫–∏ –≤ Yandex Cloud",
                "text", "env", True, True
            ),
            SettingItem(
                "OPENAI_DEFAULT_MODEL", self.settings.openai_default_model,
                "OpenAI –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", "–ú–æ–¥–µ–ª—å OpenAI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤",
                "select", "env", True, False, self.settings.openai_available_models
            ),
            SettingItem(
                "YANDEX_DEFAULT_MODEL", self.settings.yandex_default_model,
                "YandexGPT –º–æ–¥–µ–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", "–ú–æ–¥–µ–ª—å YandexGPT –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤",
                "select", "env", True, False, self.settings.yandex_available_models
            )
        ] + llm_settings
        
        # –ü–æ–∏—Å–∫ –∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è
        settings_by_category["search"] = [
            SettingItem(
                "EMBEDDING_PROVIDER", self.settings.embedding_provider,
                "–ü—Ä–æ–≤–∞–π–¥–µ—Ä —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤", "–°–µ—Ä–≤–∏—Å –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞",
                "select", "env", True, False, ["openai", "sentence-transformers"]
            ),
            SettingItem(
                "EMBEDDING_MODEL", self.settings.embedding_model,
                "–ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤", "–ö–æ–Ω–∫—Ä–µ—Ç–Ω–∞—è –º–æ–¥–µ–ª—å –¥–ª—è –≤–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏",
                "text", "env", True
            ),
            SettingItem(
                "EMBEDDING_BATCH_SIZE", self.settings.embedding_batch_size,
                "–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–∫—Å—Ç–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞ —Ä–∞–∑",
                "number", "env", True
            ),
            SettingItem(
                "SEARCH_MIN_SCORE", self.settings.search_min_score,
                "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π score –ø–æ–∏—Å–∫–∞", "–ü–æ—Ä–æ–≥ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ (0.0-1.0)",
                "number", "env", False
            ),
            SettingItem(
                "SEARCH_NAME_BOOST", self.settings.search_name_boost,
                "Boost –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–æ–≤–∞—Ä–∞", "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–µ—Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ –Ω–∞–∑–≤–∞–Ω–∏–∏",
                "number", "env", False
            ),
            SettingItem(
                "SEARCH_ARTICLE_BOOST", self.settings.search_article_boost,
                "Boost –∞—Ä—Ç–∏–∫—É–ª–∞", "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –≤–µ—Å —Å–æ–≤–ø–∞–¥–µ–Ω–∏–π –≤ –∞—Ä—Ç–∏–∫—É–ª–µ",
                "number", "env", False
            ),
            SettingItem(
                "SEARCH_MAX_RESULTS", self.settings.search_max_results,
                "–ú–∞–∫—Å–∏–º—É–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–∏—Å–∫–∞",
                "number", "env", False
            )
        ]
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        settings_by_category["notifications"] = [
            SettingItem(
                "BOT_TOKEN", self.settings.bot_token,
                "Telegram Bot Token", "–¢–æ–∫–µ–Ω –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram API",
                "password", "env", True, True
            ),
            SettingItem(
                "MANAGER_TELEGRAM_CHAT_ID", self.settings.manager_telegram_chat_id,
                "Chat ID –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤", "ID —á–∞—Ç–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ª–∏–¥–∞—Ö",
                "text", "env", False, True
            ),
            SettingItem(
                "ADMIN_TELEGRAM_IDS", self.settings.admin_telegram_ids,
                "ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤", "–°–ø–∏—Å–æ–∫ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é",
                "text", "env", False, True
            ),
            SettingItem(
                "SMTP_HOST", self.settings.smtp_host,
                "SMTP —Å–µ—Ä–≤–µ—Ä", "–ê–¥—Ä–µ—Å SMTP —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ email",
                "text", "env", False
            ),
            SettingItem(
                "SMTP_USER", self.settings.smtp_user,
                "SMTP –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", "–õ–æ–≥–∏–Ω –¥–ª—è SMTP –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏",
                "text", "env", False
            ),
            SettingItem(
                "SMTP_PASSWORD", self.settings.smtp_password,
                "SMTP –ø–∞—Ä–æ–ª—å", "–ü–∞—Ä–æ–ª—å –¥–ª—è SMTP –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏",
                "password", "env", False, True
            ),
            SettingItem(
                "MANAGER_EMAILS", self.settings.manager_emails,
                "Email –º–µ–Ω–µ–¥–∂–µ—Ä–æ–≤", "–°–ø–∏—Å–æ–∫ email –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é",
                "text", "env", False
            )
        ]
        
        # –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
        settings_by_category["integrations"] = [
            SettingItem(
                "ZOHO_TOKEN_ENDPOINT", self.settings.zoho_token_endpoint,
                "Zoho Token Endpoint", "URL –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–æ–≤ Zoho API",
                "text", "env", False
            )
        ]
        
        # –ü—É—Ç–∏ –∏ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        settings_by_category["storage"] = [
            SettingItem(
                "CHROMA_PERSIST_DIR", self.settings.chroma_persist_dir,
                "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è Chroma DB", "–ü—É—Ç—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö",
                "text", "env", True
            ),
            SettingItem(
                "UPLOAD_DIR", self.settings.upload_dir,
                "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –∑–∞–≥—Ä—É–∑–æ–∫", "–ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤",
                "text", "env", True
            )
        ]
        
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å
        settings_by_category["security"] = [
            SettingItem(
                "WEBHOOK_SECRET", self.settings.webhook_secret,
                "Webhook Secret", "–°–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –¥–ª—è –∑–∞—â–∏—Ç—ã webhook'–æ–≤ –æ—Ç –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)",
                "password", "env", True, True
            ),
            SettingItem(
                "ADMIN_SECRET_KEY", self.settings.admin_secret_key,
                "Admin Secret Key", "–ö–ª—é—á –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Å—Å–∏–π –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ (–≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)",
                "password", "env", True, True
            )
        ]
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞–º–∏ –Ω–∞ AI
        settings_by_category["cost_control"] = [
            SettingItem(
                "MONTHLY_TOKEN_LIMIT", str(self.settings.monthly_token_limit),
                "–ú–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤", "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –º–µ—Å—è—Ü",
                "number", "env", True, False
            ),
            SettingItem(
                "MONTHLY_COST_LIMIT_USD", str(self.settings.monthly_cost_limit_usd),
                "–ú–µ—Å—è—á–Ω—ã–π –ª–∏–º–∏—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ (USD)", "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –≤ –º–µ—Å—è—Ü",
                "number", "env", True, False
            ),
            SettingItem(
                "COST_ALERT_THRESHOLD", str(self.settings.cost_alert_threshold),
                "–ü–æ—Ä–æ–≥ –∞–ª–µ—Ä—Ç–∞", "–ü—Ä–∏ –∫–∞–∫–æ–º –ø—Ä–æ—Ü–µ–Ω—Ç–µ –ª–∏–º–∏—Ç–∞ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∞–ª–µ—Ä—Ç (0.1-1.0)",
                "number", "env", True, False
            ),
            SettingItem(
                "AUTO_DISABLE_ON_LIMIT", str(self.settings.auto_disable_on_limit).lower(),
                "–ê–≤—Ç–æ–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏", "–û—Ç–∫–ª—é—á–∞—Ç—å –±–æ—Ç–∞ –ø—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤",
                "boolean", "env", True, False, ["true", "false"]
            ),
            SettingItem(
                "COST_ALERT_ENABLED", str(self.settings.cost_alert_enabled).lower(),
                "–ê–ª–µ—Ä—Ç—ã –≤–∫–ª—é—á–µ–Ω—ã", "–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö",
                "boolean", "env", True, False, ["true", "false"]
            ),
            SettingItem(
                "WEEKLY_USAGE_REPORT", str(self.settings.weekly_usage_report).lower(),
                "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ –æ—Ç—á–µ—Ç—ã", "–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è",
                "boolean", "env", True, False, ["true", "false"]
            )
        ]
        
        return settings_by_category
    
    async def _get_llm_settings(self, session: AsyncSession) -> List[SettingItem]:
        """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ LLM –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        query = select(LLMSetting).order_by(LLMSetting.created_at.desc())
        result = await session.execute(query)
        llm_settings = result.scalars().all()
        
        settings_list = []
        for setting in llm_settings:
            settings_list.append(SettingItem(
                f"llm_setting_{setting.id}",
                f"{setting.provider} ({'–∞–∫—Ç–∏–≤–µ–Ω' if setting.is_active else '–Ω–µ–∞–∫—Ç–∏–≤–µ–Ω'})",
                f"LLM –Ω–∞—Å—Ç—Ä–æ–π–∫–∞: {setting.provider}",
                f"–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ {setting.provider}",
                "text", "db", False
            ))
        
        return settings_list
    
    def mask_sensitive_value(self, value: str) -> str:
        """
        –ú–∞—Å–∫–∏—Ä—É–µ—Ç —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        
        Args:
            value: –ò—Å—Ö–æ–¥–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            
        Returns:
            –ó–∞–º–∞—Å–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        """
        if not value or len(value) < 4:
            return "‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢‚Ä¢"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 4 —Å–∏–º–≤–æ–ª–∞ –∏ –º–∞—Å–∫–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω–æ–µ
        return value[:4] + "‚Ä¢" * (len(value) - 4)
    
    async def update_env_setting(self, key: str, value: str) -> bool:
        """
        –û–±–Ω–æ–≤–ª—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ .env —Ñ–∞–π–ª–µ.
        
        Args:
            key: –ö–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            value: –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
            
        Returns:
            True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–æ
        """
        try:
            if not self._env_file_path.exists():
                # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                self._env_file_path.touch()
            
            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π .env —Ñ–∞–π–ª
            lines = []
            if self._env_file_path.exists():
                with open(self._env_file_path, 'r', encoding='utf-8') as f:
                    lines = f.readlines()
            
            # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
            key_found = False
            for i, line in enumerate(lines):
                if line.strip().startswith(f"{key}="):
                    lines[i] = f"{key}={value}\n"
                    key_found = True
                    break
            
            # –ï—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü
            if not key_found:
                lines.append(f"{key}={value}\n")
            
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ –≤ —Ñ–∞–π–ª
            with open(self._env_file_path, 'w', encoding='utf-8') as f:
                f.writelines(lines)
            
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è .env: {e}")
            return False
    
    def validate_setting(self, key: str, value: str, setting_type: str) -> Tuple[bool, str]:
        """
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.
        
        Args:
            key: –ö–ª—é—á –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            value: –ó–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
            setting_type: –¢–∏–ø –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            
        Returns:
            Tuple[is_valid, error_message]
        """
        if setting_type == "boolean":
            if value.lower() not in ["true", "false", "1", "0", "yes", "no"]:
                return False, "–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å true/false"
        
        elif setting_type == "number":
            try:
                float(value)
            except ValueError:
                return False, "–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º"
        
        elif key == "DATABASE_URL":
            if not value.startswith(("postgresql://", "postgresql+asyncpg://")):
                return False, "URL –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å postgresql:// –∏–ª–∏ postgresql+asyncpg://"
        
        elif key == "SEARCH_MIN_SCORE":
            try:
                score = float(value)
                if not 0.0 <= score <= 1.0:
                    return False, "–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 0.0 –¥–æ 1.0"
            except ValueError:
                return False, "–ó–Ω–∞—á–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º –æ—Ç 0.0 –¥–æ 1.0"
        
        return True, ""
