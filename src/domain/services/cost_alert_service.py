"""
–°–µ—Ä–≤–∏—Å –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤ –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–æ–≤ AI —Ä–∞—Å—Ö–æ–¥–æ–≤
"""
import logging
from datetime import datetime
from typing import List, Optional
from sqlalchemy.ext.asyncio import AsyncSession

from ...config.settings import get_settings
from .usage_statistics_service import usage_statistics_service
from ...infrastructure.logging.hybrid_logger import hybrid_logger

logger = logging.getLogger(__name__)


class CostAlertService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ä–∞—Å—Ö–æ–¥–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤"""
    
    def __init__(self):
        self.settings = get_settings()
        self._logger = logging.getLogger(f"{__name__}.{self.__class__.__name__}")
    
    async def check_and_send_alerts(self, session: AsyncSession) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–µ —Ä–∞—Å—Ö–æ–¥—ã –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–ª–µ—Ä—Ç—ã –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True –µ—Å–ª–∏ –≤—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ, False –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω—ã –ª–∏–º–∏—Ç—ã.
        """
        if not self.settings.cost_alert_enabled:
            return True
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
            current_year = datetime.now().year
            current_month = datetime.now().month
            
            summary = await usage_statistics_service.get_monthly_summary(
                session, current_year, current_month
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤
            token_usage_percent = summary.total_tokens / self.settings.monthly_token_limit
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å —Ü–µ–Ω—ã)
            cost_usage_percent = 0.0
            if hasattr(summary, 'total_cost_usd') and summary.total_cost_usd and summary.total_cost_usd > 0:
                cost_usage_percent = summary.total_cost_usd / self.settings.monthly_cost_limit_usd
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            max_usage_percent = max(token_usage_percent, cost_usage_percent)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Ä–æ–≥–∏
            if max_usage_percent >= 1.0:
                # –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç - –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–µ—Ä—Ç
                await self._send_limit_exceeded_alert(summary, token_usage_percent, cost_usage_percent)
                return False
                
            elif max_usage_percent >= self.settings.cost_alert_threshold:
                # –ü—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ –∫ –ª–∏–º–∏—Ç—É - –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                await self._send_threshold_alert(summary, token_usage_percent, cost_usage_percent)
            
            return True
            
        except Exception as e:
            self._logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏–º–∏—Ç–æ–≤: {e}")
            await hybrid_logger.error(
                f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ª–∏–º–∏—Ç–æ–≤ AI —Ä–∞—Å—Ö–æ–¥–æ–≤: {e}",
                metadata={"error": str(e), "service": "CostAlertService"}
            )
            return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É
    
    async def _send_threshold_alert(
        self, 
        summary, 
        token_percent: float, 
        cost_percent: float
    ) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–∏ –∫ –ª–∏–º–∏—Ç—É"""
        
        threshold_percent = int(self.settings.cost_alert_threshold * 100)
        
        message = f"‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö –Ω–∞ AI**\n\n"
        message += f"üìÖ **–ú–µ—Å—è—Ü:** {summary.year}-{summary.month:02d}\n"
        message += f"üéØ **–ü–æ—Ä–æ–≥ –∞–ª–µ—Ä—Ç–∞:** {threshold_percent}%\n\n"
        
        if token_percent >= self.settings.cost_alert_threshold:
            token_used = f"{summary.total_tokens:,}"
            token_limit = f"{self.settings.monthly_token_limit:,}"
            message += f"üî¢ **–¢–æ–∫–µ–Ω—ã:** {token_used} / {token_limit} ({token_percent:.1%})\n"
        
        if cost_percent >= self.settings.cost_alert_threshold and hasattr(summary, 'total_cost_usd') and summary.total_cost_usd:
            message += f"üí∞ **–†–∞—Å—Ö–æ–¥—ã:** ${summary.total_cost_usd:.2f} / ${self.settings.monthly_cost_limit_usd:.2f} ({cost_percent:.1%})\n"
        
        message += f"\nüìä **–î–µ—Ç–∞–ª–∏ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º:**\n"
        for provider, tokens in summary.providers.items():
            message += f"‚Ä¢ {provider.upper()}: {tokens:,} —Ç–æ–∫–µ–Ω–æ–≤\n"
        
        message += f"\nüìä **–î–µ—Ç–∞–ª–∏ –ø–æ –º–æ–¥–µ–ª—è–º:**\n"
        for model, tokens in summary.models.items():
            message += f"‚Ä¢ {model}: {tokens:,} —Ç–æ–∫–µ–Ω–æ–≤\n"
        
        await self._send_to_admins(message)
    
    async def _send_limit_exceeded_alert(
        self, 
        summary, 
        token_percent: float, 
        cost_percent: float
    ) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–ª–µ—Ä—Ç –æ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞"""
        
        message = f"üö® **–ö–†–ò–¢–ò–ß–ù–û: –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç AI —Ä–∞—Å—Ö–æ–¥–æ–≤!**\n\n"
        message += f"üìÖ **–ú–µ—Å—è—Ü:** {summary.year}-{summary.month:02d}\n"
        
        if token_percent >= 1.0:
            token_used = f"{summary.total_tokens:,}"
            token_limit = f"{self.settings.monthly_token_limit:,}"
            message += f"üî¢ **–¢–æ–∫–µ–Ω—ã:** {token_used} / {token_limit} ({token_percent:.1%}) ‚ùå\n"
        
        if cost_percent >= 1.0 and hasattr(summary, 'total_cost_usd') and summary.total_cost_usd:
            message += f"üí∞ **–†–∞—Å—Ö–æ–¥—ã:** ${summary.total_cost_usd:.2f} / ${self.settings.monthly_cost_limit_usd:.2f} ({cost_percent:.1%}) ‚ùå\n"
        
        if self.settings.auto_disable_on_limit:
            message += f"\n‚õî **–ê–≤—Ç–æ–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ** - –±–æ—Ç –±—É–¥–µ—Ç –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω!\n"
        
        message += f"\nüìä **–î–µ—Ç–∞–ª–∏ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º:**\n"
        for provider, tokens in summary.providers.items():
            message += f"‚Ä¢ {provider.upper()}: {tokens:,} —Ç–æ–∫–µ–Ω–æ–≤\n"
        
        message += f"\nüìä **–î–µ—Ç–∞–ª–∏ –ø–æ –º–æ–¥–µ–ª—è–º:**\n"
        for model, tokens in summary.models.items():
            message += f"‚Ä¢ {model}: {tokens:,} —Ç–æ–∫–µ–Ω–æ–≤\n"
        
        message += f"\nüîß **–î–µ–π—Å—Ç–≤–∏—è:**\n"
        message += f"‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏\n"
        message += f"‚Ä¢ –£–≤–µ–ª–∏—á—å—Ç–µ –ª–∏–º–∏—Ç—ã –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç–µ –∞–≤—Ç–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫—É\n"
        
        await self._send_to_admins(message)
    
    async def send_weekly_report(self, session: AsyncSession) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç –æ–± –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏"""
        
        if not self.settings.weekly_usage_report:
            return
        
        try:
            current_year = datetime.now().year
            current_month = datetime.now().month
            
            summary = await usage_statistics_service.get_monthly_summary(
                session, current_year, current_month
            )
            
            token_percent = summary.total_tokens / self.settings.monthly_token_limit
            cost_percent = 0.0
            if hasattr(summary, 'total_cost_usd') and summary.total_cost_usd and summary.total_cost_usd > 0:
                cost_percent = summary.total_cost_usd / self.settings.monthly_cost_limit_usd
            
            message = f"üìä **–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–π –æ—Ç—á–µ—Ç AI –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è**\n\n"
            message += f"üìÖ **–ú–µ—Å—è—Ü:** {summary.year}-{summary.month:02d}\n"
            message += f"üî¢ **–¢–æ–∫–µ–Ω—ã:** {summary.total_tokens:,} / {self.settings.monthly_token_limit:,} ({token_percent:.1%})\n"
            
            if hasattr(summary, 'total_cost_usd') and summary.total_cost_usd and summary.total_cost_usd > 0:
                message += f"üí∞ **–†–∞—Å—Ö–æ–¥—ã:** ${summary.total_cost_usd:.2f} / ${self.settings.monthly_cost_limit_usd:.2f} ({cost_percent:.1%})\n"
            
            message += f"\nüìà **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞–º:**\n"
            for provider, tokens in summary.providers.items():
                message += f"‚Ä¢ **{provider.upper()}:** {tokens:,} —Ç–æ–∫–µ–Ω–æ–≤\n"
            
            message += f"\nüìà **–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–æ –º–æ–¥–µ–ª—è–º:**\n"
            for model, tokens in summary.models.items():
                model_percent = (tokens / summary.total_tokens) * 100 if summary.total_tokens > 0 else 0
                message += f"‚Ä¢ **{model}:** {tokens:,} ({model_percent:.1f}%)\n"
            
            await self._send_to_admins(message)
            
        except Exception as e:
            self._logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞: {e}")
    
    async def _send_to_admins(self, message: str) -> None:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º"""
        
        admin_ids = self.settings.admin_telegram_ids_list
        if not admin_ids:
            self._logger.warning("–ù–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö Telegram ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤")
            return
        
        if not self.settings.bot_token:
            self._logger.warning("–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω BOT_TOKEN –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–æ–≤")
            return
        
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ—Å—É—Ä—Å–∞–º–∏
            from src.infrastructure.utils.bot_utils import get_bot_for_notifications
            
            async with get_bot_for_notifications() as bot:
                for admin_id in admin_ids:
                    try:
                        await bot.send_message(
                            chat_id=admin_id, 
                            text=message,
                            parse_mode="Markdown"
                        )
                        self._logger.info(f"–ê–ª–µ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}")
                    except Exception as e:
                        self._logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞–ª–µ—Ä—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {admin_id}: {e}")
                    
        except Exception as e:
            self._logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞ –¥–ª—è –∞–ª–µ—Ä—Ç–æ–≤: {e}")
    
    def should_block_ai_requests(self, session: AsyncSession) -> bool:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å AI –∑–∞–ø—Ä–æ—Å—ã –∏–∑-–∑–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤.
        –°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤ middleware.
        """
        if not self.settings.auto_disable_on_limit:
            return False
        
        # TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–∏–º–∏—Ç–æ–≤
        # –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º False, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É
        return False


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤–∏—Å–∞
cost_alert_service = CostAlertService()
